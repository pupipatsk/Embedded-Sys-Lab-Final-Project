'use client'
import React, { useState, useEffect } from 'react';
import { getDatabase, ref, set, onValue, query, orderByKey } from "firebase/database";
import { database } from './firebaseConfig';

import { updateTable } from './htmlScript'

import okImage from './notok.jpg';

import Image from 'next/image';

import axios from 'axios';

function formatDateAndTime() {
  // Create a Date object for the current date and time
  const date = new Date();

  // Set options for formatting the date and time
  const dateOptions = {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    timeZone: 'Asia/Bangkok'
  };

  const timeOptions = {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false,
    timeZone: 'Asia/Bangkok'
  };

  // Format the date and time
  const formattedDate = date.toLocaleDateString('en-GB', dateOptions);
  const formattedTime = date.toLocaleTimeString('en-GB', timeOptions);

  // Return formatted date and time
  return {
    date: formattedDate,
    time: formattedTime
  };
}

interface Log {
  id: string;
  date: string;
  time: string;
  status: string;
}

function App() {
  const [userId, setUserId] = useState('');
  const [status, setStatus] = useState('');
  const [tables, setTables] = useState<Log[]>([]);

  useEffect(() => {
    const tableRef = ref(database, 'users');
    const sortedByDateQuery = query(tableRef, orderByKey());
    
    onValue(tableRef, (snapshot) => {
      const tableData = snapshot.val();
      if (tableData) {
        const tableList = Object.keys(tableData).reverse().map((key) => ({
          id: key,
          ...tableData[key]
        }));
        setTables(tableList);
      }
    });
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    const dateAndTime = formatDateAndTime();
    writeUserData(dateAndTime.date, dateAndTime.time, status);
  };

  const writeUserData = (date: string, time: string, status: string) => {
    let userId = Date.now();
    set(ref(database, 'users/' + userId), {
      date: date,
      time: time,
      status: status,
    }).then(() => {
      console.log("Data saved successfully!");
    }).catch((error) => {
      console.log("Data could not be saved." + error);
    });
  };

  const [data, setData] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        let url = "https://api.netpie.io/v2/device/shadow/data"
        const response = await axios.get(url, {
            auth : {
              username : 'a80f1ca2-1d2b-4cd1-9fce-e930b7a59ef8',
              password : 'Hbxd2iAMGYpeCPXSbFQwUruaptgHDFNe'
            }
        })
        setData(response.data.data);
        console.log(response)
        setError(null);
      } catch (error) {
        console.error('Error fetching data:', error);
        setError('Error fetching data. Please try again later.');
      }
    };

    fetchData(); // Fetch initial data

    // Fetch data every 5 seconds
    const intervalId = setInterval(() => {
      fetchData();
    }, 5000);

    // Cleanup function to clear the interval when the component unmounts
    return () => {
      clearInterval(intervalId);
    };
  }, []); // Empty dependency array ensures that this effect runs only once

  return (
    <div className="App">
      <form onSubmit={handleSubmit}>
        <input 
          type="text" 
          placeholder="Status" 
          value={status} 
          onChange={(e) => setStatus(e.target.value)} 
        />
        <button type="submit">Save User</button>
      </form>
      <h1>Users</h1>
      {error && <p>{error}</p>}
      <ul>
        {data.val}
      </ul>
      <div className="curstate">
      <div className = "text-chadchart text-2xl py-2">มีรถจอด</div>
      <div id="container">
        <div id="redgreen"></div>
        <Image 
          src = {okImage}
          height="296"
          alt=""
          id="meme"
        />
      </div>
      
      <div className = "text-chadchart text-2xl py-2">Detected History</div>
      <table id = "myTable" style={{ display: "flex", flexDirection: "column", alignItems: "center" }}>
          
        <tbody>
        <tr>
            <td>Date</td>
            <td>Time</td>
            <td>Status</td>
          </tr>
        {tables.map((user) => (
          <tr key={user.id} style={{ backgroundColor: user.status === "green" ? "#64b846" : "red"}}>
            <td>{user.date}</td>
            <td>{user.time}</td>
            <td>{user.status === "green" ? "มีรถจอด" : "ไม่มีรถจอด"}</td>
          </tr>
        ))}
        </tbody>
      </table>
      </div>
    </div>
  );
}

export default App;