
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005090  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052dc  080052dc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080052e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b70  2000005c  08005340  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bcc  08005340  00020bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e022  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed0  00000000  00000000  0002e0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  0002ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a71  00000000  00000000  00030d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001794d  00000000  00000000  00031789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f33b  00000000  00000000  000490d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a12a  00000000  00000000  00058411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e88  00000000  00000000  000f253c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f63c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005218 	.word	0x08005218

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005218 	.word	0x08005218

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <configureADCChannel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void configureADCChannel(uint32_t channel) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
    sConfig.Channel = channel;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000d86:	2302      	movs	r3, #2
 8000d88:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <configureADCChannel+0x40>)
 8000d92:	f001 f849 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <configureADCChannel+0x38>
        Error_Handler();
 8000d9c:	f000 fc2c 	bl	80015f8 <Error_Handler>
    }
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000078 	.word	0x20000078

08000dac <readADCValue>:

uint32_t readADCValue(uint32_t channel) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    configureADCChannel(channel);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ffd7 	bl	8000d68 <configureADCChannel>
    HAL_ADC_Start(&hadc1);
 8000dba:	480a      	ldr	r0, [pc, #40]	; (8000de4 <readADCValue+0x38>)
 8000dbc:	f000 feb4 	bl	8001b28 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000);
 8000dc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <readADCValue+0x38>)
 8000dc6:	f000 ff96 	bl	8001cf6 <HAL_ADC_PollForConversion>
    uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000dca:	4806      	ldr	r0, [pc, #24]	; (8000de4 <readADCValue+0x38>)
 8000dcc:	f001 f81e 	bl	8001e0c <HAL_ADC_GetValue>
 8000dd0:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(&hadc1);
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <readADCValue+0x38>)
 8000dd4:	f000 ff5c 	bl	8001c90 <HAL_ADC_Stop>
    return value;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000078 	.word	0x20000078

08000de8 <measureDistance>:

uint32_t measureDistance(GPIO_TypeDef* trigPort, uint16_t trigPin, GPIO_TypeDef* echoPort, uint16_t echoPin) {
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	461a      	mov	r2, r3
 8000df4:	460b      	mov	r3, r1
 8000df6:	817b      	strh	r3, [r7, #10]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	813b      	strh	r3, [r7, #8]
    uint32_t pMillis = HAL_GetTick();
 8000dfc:	f000 fe20 	bl	8001a40 <HAL_GetTick>
 8000e00:	61f8      	str	r0, [r7, #28]
    uint32_t val1, val2;

    // Trigger the ultrasonic sensor
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_SET);
 8000e02:	897b      	ldrh	r3, [r7, #10]
 8000e04:	2201      	movs	r2, #1
 8000e06:	4619      	mov	r1, r3
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f001 fd7b 	bl	8002904 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e0e:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <measureDistance+0xf0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < 10);
 8000e16:	bf00      	nop
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <measureDistance+0xf0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	2b09      	cmp	r3, #9
 8000e20:	d9fa      	bls.n	8000e18 <measureDistance+0x30>
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_RESET);
 8000e22:	897b      	ldrh	r3, [r7, #10]
 8000e24:	2200      	movs	r2, #0
 8000e26:	4619      	mov	r1, r3
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f001 fd6b 	bl	8002904 <HAL_GPIO_WritePin>

    // Measure the echo response
    pMillis = HAL_GetTick();
 8000e2e:	f000 fe07 	bl	8001a40 <HAL_GetTick>
 8000e32:	61f8      	str	r0, [r7, #28]
    while (!(HAL_GPIO_ReadPin(echoPort, echoPin)) && pMillis + 10 > HAL_GetTick());
 8000e34:	bf00      	nop
 8000e36:	893b      	ldrh	r3, [r7, #8]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f001 fd4a 	bl	80028d4 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d107      	bne.n	8000e56 <measureDistance+0x6e>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f103 040a 	add.w	r4, r3, #10
 8000e4c:	f000 fdf8 	bl	8001a40 <HAL_GetTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	429c      	cmp	r4, r3
 8000e54:	d8ef      	bhi.n	8000e36 <measureDistance+0x4e>
    val1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000e56:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <measureDistance+0xf0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	61bb      	str	r3, [r7, #24]

    pMillis = HAL_GetTick();
 8000e5e:	f000 fdef 	bl	8001a40 <HAL_GetTick>
 8000e62:	61f8      	str	r0, [r7, #28]
    while ((HAL_GPIO_ReadPin(echoPort, echoPin)) && pMillis + 50 > HAL_GetTick());
 8000e64:	bf00      	nop
 8000e66:	893b      	ldrh	r3, [r7, #8]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f001 fd32 	bl	80028d4 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <measureDistance+0x9e>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000e7c:	f000 fde0 	bl	8001a40 <HAL_GetTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	429c      	cmp	r4, r3
 8000e84:	d8ef      	bhi.n	8000e66 <measureDistance+0x7e>
    val2 = __HAL_TIM_GET_COUNTER(&htim1);
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <measureDistance+0xf0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	617b      	str	r3, [r7, #20]

    return (val2 - val1) * 0.034 / 2; // distance in centimeters
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fb3d 	bl	8000514 <__aeabi_ui2d>
 8000e9a:	a30d      	add	r3, pc, #52	; (adr r3, 8000ed0 <measureDistance+0xe8>)
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	f7ff fbb2 	bl	8000608 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb4:	f7ff fcd2 	bl	800085c <__aeabi_ddiv>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fdb4 	bl	8000a2c <__aeabi_d2uiz>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	b020c49c 	.word	0xb020c49c
 8000ed4:	3fa16872 	.word	0x3fa16872
 8000ed8:	200000c0 	.word	0x200000c0

08000edc <printUART2>:

void printUART2(const char* prefix, uint32_t value) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
    sprintf(msg, "%s: %d\r\n", prefix, value);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4909      	ldr	r1, [pc, #36]	; (8000f10 <printUART2+0x34>)
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <printUART2+0x38>)
 8000eee:	f003 fcef 	bl	80048d0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000ef2:	4808      	ldr	r0, [pc, #32]	; (8000f14 <printUART2+0x38>)
 8000ef4:	f7ff f974 	bl	80001e0 <strlen>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f00:	4904      	ldr	r1, [pc, #16]	; (8000f14 <printUART2+0x38>)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <printUART2+0x3c>)
 8000f04:	f002 fd06 	bl	8003914 <HAL_UART_Transmit>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	08005230 	.word	0x08005230
 8000f14:	20000198 	.word	0x20000198
 8000f18:	20000150 	.word	0x20000150

08000f1c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_IT(&huart1, data, sizeof (data));
 8000f24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f28:	4903      	ldr	r1, [pc, #12]	; (8000f38 <HAL_UART_TxCpltCallback+0x1c>)
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <HAL_UART_TxCpltCallback+0x20>)
 8000f2c:	f002 fd7d 	bl	8003a2a <HAL_UART_Transmit_IT>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200002ac 	.word	0x200002ac
 8000f3c:	20000108 	.word	0x20000108

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fd15 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f92f 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 faa7 	bl	80014a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 fa7b 	bl	800144c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f56:	f000 f991 	bl	800127c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f5a:	f000 f9fd 	bl	8001358 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f5e:	f000 fa4b 	bl	80013f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f62:	487b      	ldr	r0, [pc, #492]	; (8001150 <main+0x210>)
 8000f64:	f002 f9d0 	bl	8003308 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6e:	4879      	ldr	r0, [pc, #484]	; (8001154 <main+0x214>)
 8000f70:	f001 fcc8 	bl	8002904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7a:	4877      	ldr	r0, [pc, #476]	; (8001158 <main+0x218>)
 8000f7c:	f001 fcc2 	bl	8002904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2110      	movs	r1, #16
 8000f84:	4874      	ldr	r0, [pc, #464]	; (8001158 <main+0x218>)
 8000f86:	f001 fcbd 	bl	8002904 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // LDR sensors
	  uint32_t lux1 = readADCValue(ADC_CHANNEL_0);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff ff0e 	bl	8000dac <readADCValue>
 8000f90:	61f8      	str	r0, [r7, #28]
	  uint32_t lux2 = readADCValue(ADC_CHANNEL_1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff ff0a 	bl	8000dac <readADCValue>
 8000f98:	61b8      	str	r0, [r7, #24]
	  uint32_t lux3 = readADCValue(ADC_CHANNEL_4);
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	f7ff ff06 	bl	8000dac <readADCValue>
 8000fa0:	6178      	str	r0, [r7, #20]

	  // Ultrasonic sensors
	  uint32_t distance1 = measureDistance(GPIOA, GPIO_PIN_8, GPIOA, GPIO_PIN_7);
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	4a6b      	ldr	r2, [pc, #428]	; (8001154 <main+0x214>)
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	486a      	ldr	r0, [pc, #424]	; (8001154 <main+0x214>)
 8000fac:	f7ff ff1c 	bl	8000de8 <measureDistance>
 8000fb0:	6138      	str	r0, [r7, #16]
	  HAL_Delay(60);
 8000fb2:	203c      	movs	r0, #60	; 0x3c
 8000fb4:	f000 fd50 	bl	8001a58 <HAL_Delay>
	  uint32_t distance2 = measureDistance(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_6);
 8000fb8:	2340      	movs	r3, #64	; 0x40
 8000fba:	4a67      	ldr	r2, [pc, #412]	; (8001158 <main+0x218>)
 8000fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc0:	4865      	ldr	r0, [pc, #404]	; (8001158 <main+0x218>)
 8000fc2:	f7ff ff11 	bl	8000de8 <measureDistance>
 8000fc6:	60f8      	str	r0, [r7, #12]
	  HAL_Delay(60);
 8000fc8:	203c      	movs	r0, #60	; 0x3c
 8000fca:	f000 fd45 	bl	8001a58 <HAL_Delay>
	  uint32_t distance3 = measureDistance(GPIOB, GPIO_PIN_4, GPIOC, GPIO_PIN_7);
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	4a62      	ldr	r2, [pc, #392]	; (800115c <main+0x21c>)
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	4860      	ldr	r0, [pc, #384]	; (8001158 <main+0x218>)
 8000fd6:	f7ff ff07 	bl	8000de8 <measureDistance>
 8000fda:	60b8      	str	r0, [r7, #8]

	  // Logic
	  lux_threshold = 3400;
 8000fdc:	4b60      	ldr	r3, [pc, #384]	; (8001160 <main+0x220>)
 8000fde:	f640 5248 	movw	r2, #3400	; 0xd48
 8000fe2:	601a      	str	r2, [r3, #0]
	  if (lux1 < lux_threshold) lux1State = 1;
 8000fe4:	4b5e      	ldr	r3, [pc, #376]	; (8001160 <main+0x220>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d203      	bcs.n	8000ff8 <main+0xb8>
 8000ff0:	4b5c      	ldr	r3, [pc, #368]	; (8001164 <main+0x224>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e002      	b.n	8000ffe <main+0xbe>
	  else lux1State = 0;
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	; (8001164 <main+0x224>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
	  if (lux2 < lux_threshold) lux2State = 1;
 8000ffe:	4b58      	ldr	r3, [pc, #352]	; (8001160 <main+0x220>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	4293      	cmp	r3, r2
 8001008:	d203      	bcs.n	8001012 <main+0xd2>
 800100a:	4b57      	ldr	r3, [pc, #348]	; (8001168 <main+0x228>)
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e002      	b.n	8001018 <main+0xd8>
	  else lux2State = 0;
 8001012:	4b55      	ldr	r3, [pc, #340]	; (8001168 <main+0x228>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	  if (lux3 < lux_threshold) lux3State = 1;
 8001018:	4b51      	ldr	r3, [pc, #324]	; (8001160 <main+0x220>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	4293      	cmp	r3, r2
 8001022:	d203      	bcs.n	800102c <main+0xec>
 8001024:	4b51      	ldr	r3, [pc, #324]	; (800116c <main+0x22c>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e002      	b.n	8001032 <main+0xf2>
	  else lux3State = 0;
 800102c:	4b4f      	ldr	r3, [pc, #316]	; (800116c <main+0x22c>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]

	  dist_threshold = 10;
 8001032:	4b4f      	ldr	r3, [pc, #316]	; (8001170 <main+0x230>)
 8001034:	220a      	movs	r2, #10
 8001036:	801a      	strh	r2, [r3, #0]
	  if (distance1 < dist_threshold) dist1State = 1;
 8001038:	4b4d      	ldr	r3, [pc, #308]	; (8001170 <main+0x230>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4293      	cmp	r3, r2
 8001042:	d203      	bcs.n	800104c <main+0x10c>
 8001044:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <main+0x234>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e002      	b.n	8001052 <main+0x112>
	  else dist1State = 0;
 800104c:	4b49      	ldr	r3, [pc, #292]	; (8001174 <main+0x234>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
	  if (distance2 < dist_threshold) dist2State = 1;
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <main+0x230>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4293      	cmp	r3, r2
 800105c:	d203      	bcs.n	8001066 <main+0x126>
 800105e:	4b46      	ldr	r3, [pc, #280]	; (8001178 <main+0x238>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	e002      	b.n	800106c <main+0x12c>
	  else dist2State = 0;
 8001066:	4b44      	ldr	r3, [pc, #272]	; (8001178 <main+0x238>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
	  if (distance3 < dist_threshold) dist3State = 1;
 800106c:	4b40      	ldr	r3, [pc, #256]	; (8001170 <main+0x230>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	4293      	cmp	r3, r2
 8001076:	d203      	bcs.n	8001080 <main+0x140>
 8001078:	4b40      	ldr	r3, [pc, #256]	; (800117c <main+0x23c>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e002      	b.n	8001086 <main+0x146>
	  else dist3State = 0;
 8001080:	4b3e      	ldr	r3, [pc, #248]	; (800117c <main+0x23c>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
	  	  // pair
	  if (lux1State == 1 && dist1State == 1) pair1State = 1;
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <main+0x224>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d107      	bne.n	800109e <main+0x15e>
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <main+0x234>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d103      	bne.n	800109e <main+0x15e>
 8001096:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <main+0x240>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e002      	b.n	80010a4 <main+0x164>
	  else pair1State = 0;
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <main+0x240>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
	  if (lux2State == 1 && dist2State == 1) pair2State = 1;
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <main+0x228>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d107      	bne.n	80010bc <main+0x17c>
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <main+0x238>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d103      	bne.n	80010bc <main+0x17c>
 80010b4:	4b33      	ldr	r3, [pc, #204]	; (8001184 <main+0x244>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e002      	b.n	80010c2 <main+0x182>
	  else pair2State = 0;
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <main+0x244>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
	  if (lux3State == 1 && dist3State == 1) pair3State = 1;
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <main+0x22c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d107      	bne.n	80010da <main+0x19a>
 80010ca:	4b2c      	ldr	r3, [pc, #176]	; (800117c <main+0x23c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d103      	bne.n	80010da <main+0x19a>
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <main+0x248>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e002      	b.n	80010e0 <main+0x1a0>
	  else pair3State = 0;
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <main+0x248>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]

	  uint8_t sumPairState = pair1State + pair2State + pair3State;
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <main+0x240>)
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <main+0x244>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <main+0x248>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	71fb      	strb	r3, [r7, #7]
	  if (sumPairState >= 2) presentState = 1;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d903      	bls.n	8001102 <main+0x1c2>
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <main+0x24c>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e002      	b.n	8001108 <main+0x1c8>
	  else presentState = 0;
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <main+0x24c>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]

	  // print via UART2
	  printUART2("lux1", lux1);
 8001108:	69f9      	ldr	r1, [r7, #28]
 800110a:	4821      	ldr	r0, [pc, #132]	; (8001190 <main+0x250>)
 800110c:	f7ff fee6 	bl	8000edc <printUART2>
	  printUART2("lux2", lux2);
 8001110:	69b9      	ldr	r1, [r7, #24]
 8001112:	4820      	ldr	r0, [pc, #128]	; (8001194 <main+0x254>)
 8001114:	f7ff fee2 	bl	8000edc <printUART2>
	  printUART2("lux3", lux3);
 8001118:	6979      	ldr	r1, [r7, #20]
 800111a:	481f      	ldr	r0, [pc, #124]	; (8001198 <main+0x258>)
 800111c:	f7ff fede 	bl	8000edc <printUART2>
	  printUART2("distance1", distance1);
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	481e      	ldr	r0, [pc, #120]	; (800119c <main+0x25c>)
 8001124:	f7ff feda 	bl	8000edc <printUART2>
	  printUART2("distance2", distance2);
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	481d      	ldr	r0, [pc, #116]	; (80011a0 <main+0x260>)
 800112c:	f7ff fed6 	bl	8000edc <printUART2>
	  printUART2("distance3", distance3);
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	481c      	ldr	r0, [pc, #112]	; (80011a4 <main+0x264>)
 8001134:	f7ff fed2 	bl	8000edc <printUART2>
	  printUART2("presentState", presentState);
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <main+0x24c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	481a      	ldr	r0, [pc, #104]	; (80011a8 <main+0x268>)
 8001140:	f7ff fecc 	bl	8000edc <printUART2>


	  HAL_Delay(1000);
 8001144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001148:	f000 fc86 	bl	8001a58 <HAL_Delay>
  {
 800114c:	e71d      	b.n	8000f8a <main+0x4a>
 800114e:	bf00      	nop
 8001150:	200000c0 	.word	0x200000c0
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800
 8001160:	20000298 	.word	0x20000298
 8001164:	2000029c 	.word	0x2000029c
 8001168:	2000029d 	.word	0x2000029d
 800116c:	2000029e 	.word	0x2000029e
 8001170:	200002a0 	.word	0x200002a0
 8001174:	200002a2 	.word	0x200002a2
 8001178:	200002a3 	.word	0x200002a3
 800117c:	200002a4 	.word	0x200002a4
 8001180:	200002a5 	.word	0x200002a5
 8001184:	200002a6 	.word	0x200002a6
 8001188:	200002a7 	.word	0x200002a7
 800118c:	200002a8 	.word	0x200002a8
 8001190:	0800523c 	.word	0x0800523c
 8001194:	08005244 	.word	0x08005244
 8001198:	0800524c 	.word	0x0800524c
 800119c:	08005254 	.word	0x08005254
 80011a0:	08005260 	.word	0x08005260
 80011a4:	0800526c 	.word	0x0800526c
 80011a8:	08005278 	.word	0x08005278

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	; 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2230      	movs	r2, #48	; 0x30
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fba8 	bl	8004910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <SystemClock_Config+0xc8>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a26      	ldr	r2, [pc, #152]	; (8001274 <SystemClock_Config+0xc8>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011de:	6413      	str	r3, [r2, #64]	; 0x40
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <SystemClock_Config+0xc8>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <SystemClock_Config+0xcc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a20      	ldr	r2, [pc, #128]	; (8001278 <SystemClock_Config+0xcc>)
 80011f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <SystemClock_Config+0xcc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800120c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001212:	2302      	movs	r3, #2
 8001214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001216:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800121c:	2304      	movs	r3, #4
 800121e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001220:	2364      	movs	r3, #100	; 0x64
 8001222:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001224:	2302      	movs	r3, #2
 8001226:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001228:	2304      	movs	r3, #4
 800122a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122c:	f107 0320 	add.w	r3, r7, #32
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fb81 	bl	8002938 <HAL_RCC_OscConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800123c:	f000 f9dc 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	230f      	movs	r3, #15
 8001242:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001244:	2302      	movs	r3, #2
 8001246:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2103      	movs	r1, #3
 800125c:	4618      	mov	r0, r3
 800125e:	f001 fde3 	bl	8002e28 <HAL_RCC_ClockConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001268:	f000 f9c6 	bl	80015f8 <Error_Handler>
  }
}
 800126c:	bf00      	nop
 800126e:	3750      	adds	r7, #80	; 0x50
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800
 8001278:	40007000 	.word	0x40007000

0800127c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800128e:	4b2f      	ldr	r3, [pc, #188]	; (800134c <MX_ADC1_Init+0xd0>)
 8001290:	4a2f      	ldr	r2, [pc, #188]	; (8001350 <MX_ADC1_Init+0xd4>)
 8001292:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_ADC1_Init+0xd0>)
 8001296:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800129a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_ADC1_Init+0xd0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_ADC1_Init+0xd0>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_ADC1_Init+0xd0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_ADC1_Init+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_ADC1_Init+0xd0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_ADC1_Init+0xd0>)
 80012be:	4a25      	ldr	r2, [pc, #148]	; (8001354 <MX_ADC1_Init+0xd8>)
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_ADC1_Init+0xd0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_ADC1_Init+0xd0>)
 80012ca:	2203      	movs	r2, #3
 80012cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_ADC1_Init+0xd0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_ADC1_Init+0xd0>)
 80012d8:	2201      	movs	r2, #1
 80012da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012dc:	481b      	ldr	r0, [pc, #108]	; (800134c <MX_ADC1_Init+0xd0>)
 80012de:	f000 fbdf 	bl	8001aa0 <HAL_ADC_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012e8:	f000 f986 	bl	80015f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	4813      	ldr	r0, [pc, #76]	; (800134c <MX_ADC1_Init+0xd0>)
 80012fe:	f000 fd93 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001308:	f000 f976 	bl	80015f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800130c:	2301      	movs	r3, #1
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001310:	2302      	movs	r3, #2
 8001312:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_ADC1_Init+0xd0>)
 800131a:	f000 fd85 	bl	8001e28 <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001324:	f000 f968 	bl	80015f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001328:	2304      	movs	r3, #4
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800132c:	2303      	movs	r3, #3
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_ADC1_Init+0xd0>)
 8001336:	f000 fd77 	bl	8001e28 <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001340:	f000 f95a 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000078 	.word	0x20000078
 8001350:	40012000 	.word	0x40012000
 8001354:	0f000001 	.word	0x0f000001

08001358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_TIM1_Init+0x98>)
 8001376:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <MX_TIM1_Init+0x9c>)
 8001378:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_TIM1_Init+0x98>)
 800137c:	2263      	movs	r2, #99	; 0x63
 800137e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_TIM1_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_TIM1_Init+0x98>)
 8001388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800138c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_TIM1_Init+0x98>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_TIM1_Init+0x98>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_TIM1_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <MX_TIM1_Init+0x98>)
 80013a2:	f001 ff61 	bl	8003268 <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013ac:	f000 f924 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_TIM1_Init+0x98>)
 80013be:	f001 fffd 	bl	80033bc <HAL_TIM_ConfigClockSource>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013c8:	f000 f916 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_TIM1_Init+0x98>)
 80013da:	f002 f9dd 	bl	8003798 <HAL_TIMEx_MasterConfigSynchronization>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013e4:	f000 f908 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200000c0 	.word	0x200000c0
 80013f4:	40010000 	.word	0x40010000

080013f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART1_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001430:	f002 fa20 	bl	8003874 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f000 f8dd 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000108 	.word	0x20000108
 8001448:	40011000 	.word	0x40011000

0800144c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_USART2_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001484:	f002 f9f6 	bl	8003874 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f000 f8b3 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000150 	.word	0x20000150
 800149c:	40004400 	.word	0x40004400

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a4a      	ldr	r2, [pc, #296]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a43      	ldr	r2, [pc, #268]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a3c      	ldr	r2, [pc, #240]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <MX_GPIO_Init+0x148>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <MX_GPIO_Init+0x148>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a35      	ldr	r2, [pc, #212]	; (80015e8 <MX_GPIO_Init+0x148>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <MX_GPIO_Init+0x148>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 7190 	mov.w	r1, #288	; 0x120
 800152c:	482f      	ldr	r0, [pc, #188]	; (80015ec <MX_GPIO_Init+0x14c>)
 800152e:	f001 f9e9 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001538:	482d      	ldr	r0, [pc, #180]	; (80015f0 <MX_GPIO_Init+0x150>)
 800153a:	f001 f9e3 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800153e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001544:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4827      	ldr	r0, [pc, #156]	; (80015f4 <MX_GPIO_Init+0x154>)
 8001556:	f001 f839 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 800155a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	481e      	ldr	r0, [pc, #120]	; (80015ec <MX_GPIO_Init+0x14c>)
 8001574:	f001 f82a 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <MX_GPIO_Init+0x14c>)
 800158c:	f001 f81e 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001590:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4811      	ldr	r0, [pc, #68]	; (80015f0 <MX_GPIO_Init+0x150>)
 80015aa:	f001 f80f 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <MX_GPIO_Init+0x154>)
 80015c2:	f001 f803 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c6:	2340      	movs	r3, #64	; 0x40
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_GPIO_Init+0x150>)
 80015da:	f000 fff7 	bl	80025cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40020800 	.word	0x40020800

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001600:	e7fe      	b.n	8001600 <Error_Handler+0x8>
	...

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_MspInit+0x4c>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_MspInit+0x4c>)
 8001614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_MspInit+0x4c>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_MspInit+0x4c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_MspInit+0x4c>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_MspInit+0x4c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001642:	2007      	movs	r0, #7
 8001644:	f000 feee 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800

08001654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_ADC_MspInit+0x7c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d127      	bne.n	80016c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80016ae:	2313      	movs	r3, #19
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b2:	2303      	movs	r3, #3
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_ADC_MspInit+0x84>)
 80016c2:	f000 ff83 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40012000 	.word	0x40012000
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_TIM_Base_MspInit+0x3c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d10d      	bne.n	800170a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_TIM_Base_MspInit+0x40>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_TIM_Base_MspInit+0x40>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_TIM_Base_MspInit+0x40>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40010000 	.word	0x40010000
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a36      	ldr	r2, [pc, #216]	; (8001818 <HAL_UART_MspInit+0xf8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d135      	bne.n	80017ae <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	4b35      	ldr	r3, [pc, #212]	; (800181c <HAL_UART_MspInit+0xfc>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a34      	ldr	r2, [pc, #208]	; (800181c <HAL_UART_MspInit+0xfc>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <HAL_UART_MspInit+0xfc>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	4b2e      	ldr	r3, [pc, #184]	; (800181c <HAL_UART_MspInit+0xfc>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a2d      	ldr	r2, [pc, #180]	; (800181c <HAL_UART_MspInit+0xfc>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_UART_MspInit+0xfc>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800177a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178c:	2307      	movs	r3, #7
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4822      	ldr	r0, [pc, #136]	; (8001820 <HAL_UART_MspInit+0x100>)
 8001798:	f000 ff18 	bl	80025cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	2025      	movs	r0, #37	; 0x25
 80017a2:	f000 fe4a 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017a6:	2025      	movs	r0, #37	; 0x25
 80017a8:	f000 fe63 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ac:	e030      	b.n	8001810 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_UART_MspInit+0x104>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d12b      	bne.n	8001810 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a16      	ldr	r2, [pc, #88]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017f0:	230c      	movs	r3, #12
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001800:	2307      	movs	r3, #7
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_UART_MspInit+0x100>)
 800180c:	f000 fede 	bl	80025cc <HAL_GPIO_Init>
}
 8001810:	bf00      	nop
 8001812:	3730      	adds	r7, #48	; 0x30
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40011000 	.word	0x40011000
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000
 8001824:	40004400 	.word	0x40004400

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800182c:	e7fe      	b.n	800182c <NMI_Handler+0x4>

0800182e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler+0x4>

0800183a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <UsageFault_Handler+0x4>

08001846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001874:	f000 f8d0 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}

0800187c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <USART1_IRQHandler+0x10>)
 8001882:	f002 f909 	bl	8003a98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000108 	.word	0x20000108

08001890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001898:	4a14      	ldr	r2, [pc, #80]	; (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c0:	f003 f82e 	bl	8004920 <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20020000 	.word	0x20020000
 80018f0:	00000400 	.word	0x00000400
 80018f4:	20000a7c 	.word	0x20000a7c
 80018f8:	20000bd0 	.word	0x20000bd0

080018fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001924:	f7ff ffea 	bl	80018fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f002 ffed 	bl	800492c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff faf5 	bl	8000f40 <main>
  bx  lr    
 8001956:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001964:	080052e4 	.word	0x080052e4
  ldr r2, =_sbss
 8001968:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800196c:	20000bcc 	.word	0x20000bcc

08001970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_Init+0x40>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_Init+0x40>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x40>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 fd41 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fe2c 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fd59 	bl	800248e <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f4:	f000 fd21 	bl	800243a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000a80 	.word	0x20000a80

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000a80 	.word	0x20000a80

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff ffee 	bl	8001a40 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_Delay+0x44>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e033      	b.n	8001b1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fdc8 	bl	8001654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ae6:	f023 0302 	bic.w	r3, r3, #2
 8001aea:	f043 0202 	orr.w	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 faca 	bl	800208c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b0e:	e001      	b.n	8001b14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Start+0x1a>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e097      	b.n	8001c72 <HAL_ADC_Start+0x14a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d018      	beq.n	8001b8a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b68:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <HAL_ADC_Start+0x158>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a45      	ldr	r2, [pc, #276]	; (8001c84 <HAL_ADC_Start+0x15c>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0c9a      	lsrs	r2, r3, #18
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d15f      	bne.n	8001c58 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd6:	d106      	bne.n	8001be6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bdc:	f023 0206 	bic.w	r2, r3, #6
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	645a      	str	r2, [r3, #68]	; 0x44
 8001be4:	e002      	b.n	8001bec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_ADC_Start+0x160>)
 8001bf6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c00:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d129      	bne.n	8001c70 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	e020      	b.n	8001c70 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_ADC_Start+0x164>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d11b      	bne.n	8001c70 <HAL_ADC_Start+0x148>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d114      	bne.n	8001c70 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	e00b      	b.n	8001c70 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f043 0210 	orr.w	r2, r3, #16
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	40012000 	.word	0x40012000

08001c90 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_Stop+0x16>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e021      	b.n	8001cea <HAL_ADC_Stop+0x5a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d109      	bne.n	8001ce0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d12:	d113      	bne.n	8001d3c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d22:	d10b      	bne.n	8001d3c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e063      	b.n	8001e04 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d3c:	f7ff fe80 	bl	8001a40 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d42:	e021      	b.n	8001d88 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d4a:	d01d      	beq.n	8001d88 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <HAL_ADC_PollForConversion+0x6c>
 8001d52:	f7ff fe75 	bl	8001a40 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d212      	bcs.n	8001d88 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d00b      	beq.n	8001d88 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f043 0204 	orr.w	r2, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e03d      	b.n	8001e04 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d1d6      	bne.n	8001d44 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f06f 0212 	mvn.w	r2, #18
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d123      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d11f      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d111      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1c>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e113      	b.n	800206c <HAL_ADC_ConfigChannel+0x244>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b09      	cmp	r3, #9
 8001e52:	d925      	bls.n	8001ea0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68d9      	ldr	r1, [r3, #12]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	3b1e      	subs	r3, #30
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43da      	mvns	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	400a      	ands	r2, r1
 8001e78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68d9      	ldr	r1, [r3, #12]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4403      	add	r3, r0
 8001e92:	3b1e      	subs	r3, #30
 8001e94:	409a      	lsls	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	e022      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6919      	ldr	r1, [r3, #16]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4403      	add	r3, r0
 8001edc:	409a      	lsls	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d824      	bhi.n	8001f38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b05      	subs	r3, #5
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b05      	subs	r3, #5
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
 8001f36:	e04c      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	d824      	bhi.n	8001f8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b23      	subs	r3, #35	; 0x23
 8001f52:	221f      	movs	r2, #31
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b23      	subs	r3, #35	; 0x23
 8001f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
 8001f88:	e023      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b41      	subs	r3, #65	; 0x41
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b41      	subs	r3, #65	; 0x41
 8001fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_ADC_ConfigChannel+0x250>)
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_ADC_ConfigChannel+0x254>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d10f      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d8>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b12      	cmp	r3, #18
 8001fe6:	d10b      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <HAL_ADC_ConfigChannel+0x254>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12b      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x23a>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <HAL_ADC_ConfigChannel+0x258>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <HAL_ADC_ConfigChannel+0x1f4>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b11      	cmp	r3, #17
 800201a:	d122      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_ADC_ConfigChannel+0x258>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d111      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_ADC_ConfigChannel+0x25c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a11      	ldr	r2, [pc, #68]	; (8002088 <HAL_ADC_ConfigChannel+0x260>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	0c9a      	lsrs	r2, r3, #18
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002054:	e002      	b.n	800205c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3b01      	subs	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40012300 	.word	0x40012300
 800207c:	40012000 	.word	0x40012000
 8002080:	10000012 	.word	0x10000012
 8002084:	20000000 	.word	0x20000000
 8002088:	431bde83 	.word	0x431bde83

0800208c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002094:	4b79      	ldr	r3, [pc, #484]	; (800227c <ADC_Init+0x1f0>)
 8002096:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	021a      	lsls	r2, r3, #8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6899      	ldr	r1, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	4a58      	ldr	r2, [pc, #352]	; (8002280 <ADC_Init+0x1f4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d022      	beq.n	800216a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002132:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6899      	ldr	r1, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e00f      	b.n	800218a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002188:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0202 	bic.w	r2, r2, #2
 8002198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7e1b      	ldrb	r3, [r3, #24]
 80021a4:	005a      	lsls	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01b      	beq.n	80021f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6859      	ldr	r1, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	3b01      	subs	r3, #1
 80021e4:	035a      	lsls	r2, r3, #13
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	e007      	b.n	8002200 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	3b01      	subs	r3, #1
 800221c:	051a      	lsls	r2, r3, #20
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002242:	025a      	lsls	r2, r3, #9
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	029a      	lsls	r2, r3, #10
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	609a      	str	r2, [r3, #8]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40012300 	.word	0x40012300
 8002280:	0f000001 	.word	0x0f000001

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	; (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff29 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff3e 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff31 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa2 	bl	80023e0 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024b4:	f7ff fac4 	bl	8001a40 <HAL_GetTick>
 80024b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d008      	beq.n	80024d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e052      	b.n	800257e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0216 	bic.w	r2, r2, #22
 80024e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d103      	bne.n	8002508 <HAL_DMA_Abort+0x62>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0208 	bic.w	r2, r2, #8
 8002516:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002528:	e013      	b.n	8002552 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800252a:	f7ff fa89 	bl	8001a40 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b05      	cmp	r3, #5
 8002536:	d90c      	bls.n	8002552 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2203      	movs	r2, #3
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e015      	b.n	800257e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e4      	bne.n	800252a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	223f      	movs	r2, #63	; 0x3f
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d004      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e00c      	b.n	80025be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2205      	movs	r2, #5
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e159      	b.n	800289c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	f040 8148 	bne.w	8002896 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d005      	beq.n	800261e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261a:	2b02      	cmp	r3, #2
 800261c:	d130      	bne.n	8002680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 0201 	and.w	r2, r3, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b03      	cmp	r3, #3
 800268a:	d017      	beq.n	80026bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d123      	bne.n	8002710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	69b9      	ldr	r1, [r7, #24]
 800270c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0203 	and.w	r2, r3, #3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80a2 	beq.w	8002896 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b57      	ldr	r3, [pc, #348]	; (80028b4 <HAL_GPIO_Init+0x2e8>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	4a56      	ldr	r2, [pc, #344]	; (80028b4 <HAL_GPIO_Init+0x2e8>)
 800275c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002760:	6453      	str	r3, [r2, #68]	; 0x44
 8002762:	4b54      	ldr	r3, [pc, #336]	; (80028b4 <HAL_GPIO_Init+0x2e8>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276e:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_GPIO_Init+0x2ec>)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	220f      	movs	r2, #15
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a49      	ldr	r2, [pc, #292]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d019      	beq.n	80027ce <HAL_GPIO_Init+0x202>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a48      	ldr	r2, [pc, #288]	; (80028c0 <HAL_GPIO_Init+0x2f4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_GPIO_Init+0x1fe>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a47      	ldr	r2, [pc, #284]	; (80028c4 <HAL_GPIO_Init+0x2f8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00d      	beq.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a46      	ldr	r2, [pc, #280]	; (80028c8 <HAL_GPIO_Init+0x2fc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d007      	beq.n	80027c2 <HAL_GPIO_Init+0x1f6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a45      	ldr	r2, [pc, #276]	; (80028cc <HAL_GPIO_Init+0x300>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_GPIO_Init+0x1f2>
 80027ba:	2304      	movs	r3, #4
 80027bc:	e008      	b.n	80027d0 <HAL_GPIO_Init+0x204>
 80027be:	2307      	movs	r3, #7
 80027c0:	e006      	b.n	80027d0 <HAL_GPIO_Init+0x204>
 80027c2:	2303      	movs	r3, #3
 80027c4:	e004      	b.n	80027d0 <HAL_GPIO_Init+0x204>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e002      	b.n	80027d0 <HAL_GPIO_Init+0x204>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_GPIO_Init+0x204>
 80027ce:	2300      	movs	r3, #0
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	f002 0203 	and.w	r2, r2, #3
 80027d6:	0092      	lsls	r2, r2, #2
 80027d8:	4093      	lsls	r3, r2
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e0:	4935      	ldr	r1, [pc, #212]	; (80028b8 <HAL_GPIO_Init+0x2ec>)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	3302      	adds	r3, #2
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <HAL_GPIO_Init+0x304>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002812:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <HAL_GPIO_Init+0x304>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_GPIO_Init+0x304>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800283c:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <HAL_GPIO_Init+0x304>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002842:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <HAL_GPIO_Init+0x304>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002866:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <HAL_GPIO_Init+0x304>)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_GPIO_Init+0x304>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002890:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <HAL_GPIO_Init+0x304>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	2b0f      	cmp	r3, #15
 80028a0:	f67f aea2 	bls.w	80025e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3724      	adds	r7, #36	; 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40013800 	.word	0x40013800
 80028bc:	40020000 	.word	0x40020000
 80028c0:	40020400 	.word	0x40020400
 80028c4:	40020800 	.word	0x40020800
 80028c8:	40020c00 	.word	0x40020c00
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40013c00 	.word	0x40013c00

080028d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
 80028f0:	e001      	b.n	80028f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
 8002910:	4613      	mov	r3, r2
 8002912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002914:	787b      	ldrb	r3, [r7, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002920:	e003      	b.n	800292a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	041a      	lsls	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	619a      	str	r2, [r3, #24]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e267      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d075      	beq.n	8002a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002956:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b04      	cmp	r3, #4
 8002960:	d00c      	beq.n	800297c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002962:	4b85      	ldr	r3, [pc, #532]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800296a:	2b08      	cmp	r3, #8
 800296c:	d112      	bne.n	8002994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296e:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297a:	d10b      	bne.n	8002994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	4b7e      	ldr	r3, [pc, #504]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d05b      	beq.n	8002a40 <HAL_RCC_OscConfig+0x108>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d157      	bne.n	8002a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e242      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x74>
 800299e:	4b76      	ldr	r3, [pc, #472]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a75      	ldr	r2, [pc, #468]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e01d      	b.n	80029e8 <HAL_RCC_OscConfig+0xb0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x98>
 80029b6:	4b70      	ldr	r3, [pc, #448]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6f      	ldr	r2, [pc, #444]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b6d      	ldr	r3, [pc, #436]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6c      	ldr	r2, [pc, #432]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0xb0>
 80029d0:	4b69      	ldr	r3, [pc, #420]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a68      	ldr	r2, [pc, #416]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b66      	ldr	r3, [pc, #408]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a65      	ldr	r2, [pc, #404]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7ff f826 	bl	8001a40 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f8:	f7ff f822 	bl	8001a40 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e207      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0xc0>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7ff f812 	bl	8001a40 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a20:	f7ff f80e 	bl	8001a40 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1f3      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0xe8>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d063      	beq.n	8002b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d11c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a66:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d116      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a72:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_RCC_OscConfig+0x152>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e1c7      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4937      	ldr	r1, [pc, #220]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	e03a      	b.n	8002b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa8:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <HAL_RCC_OscConfig+0x244>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7fe ffc7 	bl	8001a40 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab6:	f7fe ffc3 	bl	8001a40 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e1a8      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4925      	ldr	r1, [pc, #148]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
 8002ae8:	e015      	b.n	8002b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCC_OscConfig+0x244>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe ffa6 	bl	8001a40 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe ffa2 	bl	8001a40 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e187      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d036      	beq.n	8002b90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_RCC_OscConfig+0x248>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe ff86 	bl	8001a40 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b38:	f7fe ff82 	bl	8001a40 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e167      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x200>
 8002b56:	e01b      	b.n	8002b90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_OscConfig+0x248>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe ff6f 	bl	8001a40 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b64:	e00e      	b.n	8002b84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b66:	f7fe ff6b 	bl	8001a40 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d907      	bls.n	8002b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e150      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	42470000 	.word	0x42470000
 8002b80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	4b88      	ldr	r3, [pc, #544]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ea      	bne.n	8002b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8097 	beq.w	8002ccc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba2:	4b81      	ldr	r3, [pc, #516]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	4b7d      	ldr	r3, [pc, #500]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a7c      	ldr	r2, [pc, #496]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b7a      	ldr	r3, [pc, #488]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b77      	ldr	r3, [pc, #476]	; (8002dac <HAL_RCC_OscConfig+0x474>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d118      	bne.n	8002c0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bda:	4b74      	ldr	r3, [pc, #464]	; (8002dac <HAL_RCC_OscConfig+0x474>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a73      	ldr	r2, [pc, #460]	; (8002dac <HAL_RCC_OscConfig+0x474>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be6:	f7fe ff2b 	bl	8001a40 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7fe ff27 	bl	8001a40 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e10c      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	4b6a      	ldr	r3, [pc, #424]	; (8002dac <HAL_RCC_OscConfig+0x474>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2ea>
 8002c14:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a63      	ldr	r2, [pc, #396]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	e01c      	b.n	8002c5c <HAL_RCC_OscConfig+0x324>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x30c>
 8002c2a:	4b5f      	ldr	r3, [pc, #380]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a5e      	ldr	r2, [pc, #376]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
 8002c36:	4b5c      	ldr	r3, [pc, #368]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a5b      	ldr	r2, [pc, #364]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0x324>
 8002c44:	4b58      	ldr	r3, [pc, #352]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a57      	ldr	r2, [pc, #348]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	4b55      	ldr	r3, [pc, #340]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a54      	ldr	r2, [pc, #336]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 0304 	bic.w	r3, r3, #4
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d015      	beq.n	8002c90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe feec 	bl	8001a40 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fee8 	bl	8001a40 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0cb      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c82:	4b49      	ldr	r3, [pc, #292]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0ee      	beq.n	8002c6c <HAL_RCC_OscConfig+0x334>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c90:	f7fe fed6 	bl	8001a40 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe fed2 	bl	8001a40 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e0b5      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cae:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ee      	bne.n	8002c98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc0:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	4a38      	ldr	r2, [pc, #224]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a1 	beq.w	8002e18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd6:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d05c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d141      	bne.n	8002d6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_RCC_OscConfig+0x478>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fea6 	bl	8001a40 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fea2 	bl	8001a40 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e087      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	019b      	lsls	r3, r3, #6
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	491b      	ldr	r1, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x478>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe fe7b 	bl	8001a40 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe fe77 	bl	8001a40 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e05c      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x416>
 8002d6c:	e054      	b.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <HAL_RCC_OscConfig+0x478>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fe64 	bl	8001a40 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fe60 	bl	8001a40 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e045      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x444>
 8002d9a:	e03d      	b.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e038      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40007000 	.word	0x40007000
 8002db0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x4ec>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d028      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d121      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d11a      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de4:	4013      	ands	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d111      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0cc      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d90c      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b65      	ldr	r3, [pc, #404]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b8      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	494d      	ldr	r1, [pc, #308]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d044      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d119      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e06f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e067      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f06:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4934      	ldr	r1, [pc, #208]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f18:	f7fe fd92 	bl	8001a40 <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fe fd8e 	bl	8001a40 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e04f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 020c 	and.w	r2, r3, #12
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1eb      	bne.n	8002f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d20c      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e032      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4916      	ldr	r1, [pc, #88]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	490e      	ldr	r1, [pc, #56]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fae:	f000 f821 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	490a      	ldr	r1, [pc, #40]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	5ccb      	ldrb	r3, [r1, r3]
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fcf2 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	08005288 	.word	0x08005288
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b094      	sub	sp, #80	; 0x50
 8002ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8003000:	2300      	movs	r3, #0
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003004:	2300      	movs	r3, #0
 8003006:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800300c:	4b79      	ldr	r3, [pc, #484]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d00d      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x40>
 8003018:	2b08      	cmp	r3, #8
 800301a:	f200 80e1 	bhi.w	80031e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x34>
 8003022:	2b04      	cmp	r3, #4
 8003024:	d003      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x3a>
 8003026:	e0db      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b73      	ldr	r3, [pc, #460]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800302c:	e0db      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302e:	4b73      	ldr	r3, [pc, #460]	; (80031fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003030:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003032:	e0d8      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003034:	4b6f      	ldr	r3, [pc, #444]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800303c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303e:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d063      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304a:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	2200      	movs	r2, #0
 8003052:	63bb      	str	r3, [r7, #56]	; 0x38
 8003054:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
 800305e:	2300      	movs	r3, #0
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
 8003062:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003066:	4622      	mov	r2, r4
 8003068:	462b      	mov	r3, r5
 800306a:	f04f 0000 	mov.w	r0, #0
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	0159      	lsls	r1, r3, #5
 8003074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003078:	0150      	lsls	r0, r2, #5
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4621      	mov	r1, r4
 8003080:	1a51      	subs	r1, r2, r1
 8003082:	6139      	str	r1, [r7, #16]
 8003084:	4629      	mov	r1, r5
 8003086:	eb63 0301 	sbc.w	r3, r3, r1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003098:	4659      	mov	r1, fp
 800309a:	018b      	lsls	r3, r1, #6
 800309c:	4651      	mov	r1, sl
 800309e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030a2:	4651      	mov	r1, sl
 80030a4:	018a      	lsls	r2, r1, #6
 80030a6:	4651      	mov	r1, sl
 80030a8:	ebb2 0801 	subs.w	r8, r2, r1
 80030ac:	4659      	mov	r1, fp
 80030ae:	eb63 0901 	sbc.w	r9, r3, r1
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030c6:	4690      	mov	r8, r2
 80030c8:	4699      	mov	r9, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	eb18 0303 	adds.w	r3, r8, r3
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	462b      	mov	r3, r5
 80030d4:	eb49 0303 	adc.w	r3, r9, r3
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030e6:	4629      	mov	r1, r5
 80030e8:	024b      	lsls	r3, r1, #9
 80030ea:	4621      	mov	r1, r4
 80030ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030f0:	4621      	mov	r1, r4
 80030f2:	024a      	lsls	r2, r1, #9
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030fa:	2200      	movs	r2, #0
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003104:	f7fd fcb2 	bl	8000a6c <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4613      	mov	r3, r2
 800310e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003110:	e058      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003112:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	2200      	movs	r2, #0
 800311a:	4618      	mov	r0, r3
 800311c:	4611      	mov	r1, r2
 800311e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
 8003128:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800312c:	4642      	mov	r2, r8
 800312e:	464b      	mov	r3, r9
 8003130:	f04f 0000 	mov.w	r0, #0
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	0159      	lsls	r1, r3, #5
 800313a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800313e:	0150      	lsls	r0, r2, #5
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4641      	mov	r1, r8
 8003146:	ebb2 0a01 	subs.w	sl, r2, r1
 800314a:	4649      	mov	r1, r9
 800314c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800315c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003160:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003164:	ebb2 040a 	subs.w	r4, r2, sl
 8003168:	eb63 050b 	sbc.w	r5, r3, fp
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	00eb      	lsls	r3, r5, #3
 8003176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317a:	00e2      	lsls	r2, r4, #3
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	4643      	mov	r3, r8
 8003182:	18e3      	adds	r3, r4, r3
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	464b      	mov	r3, r9
 8003188:	eb45 0303 	adc.w	r3, r5, r3
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800319a:	4629      	mov	r1, r5
 800319c:	028b      	lsls	r3, r1, #10
 800319e:	4621      	mov	r1, r4
 80031a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031a4:	4621      	mov	r1, r4
 80031a6:	028a      	lsls	r2, r1, #10
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ae:	2200      	movs	r2, #0
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	61fa      	str	r2, [r7, #28]
 80031b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b8:	f7fd fc58 	bl	8000a6c <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4613      	mov	r3, r2
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	3301      	adds	r3, #1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3750      	adds	r7, #80	; 0x50
 80031ec:	46bd      	mov	sp, r7
 80031ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	00f42400 	.word	0x00f42400
 80031fc:	007a1200 	.word	0x007a1200

08003200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_RCC_GetHCLKFreq+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000000 	.word	0x20000000

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff0 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	0a9b      	lsrs	r3, r3, #10
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	; (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800
 800323c:	08005298 	.word	0x08005298

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffdc 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0b5b      	lsrs	r3, r3, #13
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	08005298 	.word	0x08005298

08003268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e041      	b.n	80032fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe fa24 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f000 f950 	bl	800354c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d001      	beq.n	8003320 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e03c      	b.n	800339a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <HAL_TIM_Base_Start+0xa0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <HAL_TIM_Base_Start+0x5c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333a:	d013      	beq.n	8003364 <HAL_TIM_Base_Start+0x5c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_TIM_Base_Start+0xa4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <HAL_TIM_Base_Start+0x5c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <HAL_TIM_Base_Start+0xa8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_TIM_Base_Start+0x5c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <HAL_TIM_Base_Start+0xac>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_TIM_Base_Start+0x5c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <HAL_TIM_Base_Start+0xb0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d111      	bne.n	8003388 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b06      	cmp	r3, #6
 8003374:	d010      	beq.n	8003398 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003386:	e007      	b.n	8003398 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40014000 	.word	0x40014000

080033bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_TIM_ConfigClockSource+0x1c>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e0b4      	b.n	8003542 <HAL_TIM_ConfigClockSource+0x186>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003410:	d03e      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0xd4>
 8003412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003416:	f200 8087 	bhi.w	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341e:	f000 8086 	beq.w	800352e <HAL_TIM_ConfigClockSource+0x172>
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	d87f      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003428:	2b70      	cmp	r3, #112	; 0x70
 800342a:	d01a      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0xa6>
 800342c:	2b70      	cmp	r3, #112	; 0x70
 800342e:	d87b      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003430:	2b60      	cmp	r3, #96	; 0x60
 8003432:	d050      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003434:	2b60      	cmp	r3, #96	; 0x60
 8003436:	d877      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003438:	2b50      	cmp	r3, #80	; 0x50
 800343a:	d03c      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0xfa>
 800343c:	2b50      	cmp	r3, #80	; 0x50
 800343e:	d873      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d058      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	d86f      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b30      	cmp	r3, #48	; 0x30
 800344a:	d064      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15a>
 800344c:	2b30      	cmp	r3, #48	; 0x30
 800344e:	d86b      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	2b20      	cmp	r3, #32
 8003452:	d060      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15a>
 8003454:	2b20      	cmp	r3, #32
 8003456:	d867      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d05c      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15a>
 800345c:	2b10      	cmp	r3, #16
 800345e:	d05a      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15a>
 8003460:	e062      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003472:	f000 f971 	bl	8003758 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	609a      	str	r2, [r3, #8]
      break;
 800348e:	e04f      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034a0:	f000 f95a 	bl	8003758 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034b2:	609a      	str	r2, [r3, #8]
      break;
 80034b4:	e03c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c2:	461a      	mov	r2, r3
 80034c4:	f000 f8ce 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2150      	movs	r1, #80	; 0x50
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f927 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80034d4:	e02c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034e2:	461a      	mov	r2, r3
 80034e4:	f000 f8ed 	bl	80036c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2160      	movs	r1, #96	; 0x60
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f917 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80034f4:	e01c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003502:	461a      	mov	r2, r3
 8003504:	f000 f8ae 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2140      	movs	r1, #64	; 0x40
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f907 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 8003514:	e00c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f000 f8fe 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 8003526:	e003      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
      break;
 800352c:	e000      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800352e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3a      	ldr	r2, [pc, #232]	; (8003648 <TIM_Base_SetConfig+0xfc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00f      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d00b      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a37      	ldr	r2, [pc, #220]	; (800364c <TIM_Base_SetConfig+0x100>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a36      	ldr	r2, [pc, #216]	; (8003650 <TIM_Base_SetConfig+0x104>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d003      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a35      	ldr	r2, [pc, #212]	; (8003654 <TIM_Base_SetConfig+0x108>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d108      	bne.n	8003596 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2b      	ldr	r2, [pc, #172]	; (8003648 <TIM_Base_SetConfig+0xfc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01b      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a4:	d017      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a28      	ldr	r2, [pc, #160]	; (800364c <TIM_Base_SetConfig+0x100>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a27      	ldr	r2, [pc, #156]	; (8003650 <TIM_Base_SetConfig+0x104>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00f      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a26      	ldr	r2, [pc, #152]	; (8003654 <TIM_Base_SetConfig+0x108>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a25      	ldr	r2, [pc, #148]	; (8003658 <TIM_Base_SetConfig+0x10c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a24      	ldr	r2, [pc, #144]	; (800365c <TIM_Base_SetConfig+0x110>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <TIM_Base_SetConfig+0x114>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <TIM_Base_SetConfig+0xfc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d103      	bne.n	800361c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f023 0201 	bic.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	611a      	str	r2, [r3, #16]
  }
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800

08003664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800368e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f023 030a 	bic.w	r3, r3, #10
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 0210 	bic.w	r2, r3, #16
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	031b      	lsls	r3, r3, #12
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	f043 0307 	orr.w	r3, r3, #7
 8003744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	021a      	lsls	r2, r3, #8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	431a      	orrs	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e050      	b.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d013      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a18      	ldr	r2, [pc, #96]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a16      	ldr	r2, [pc, #88]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a15      	ldr	r2, [pc, #84]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a13      	ldr	r2, [pc, #76]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10c      	bne.n	8003840 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800382c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	4313      	orrs	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40014000 	.word	0x40014000

08003874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e042      	b.n	800390c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd ff40 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2224      	movs	r2, #36	; 0x24
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fd95 	bl	80043e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b20      	cmp	r3, #32
 8003932:	d175      	bne.n	8003a20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_UART_Transmit+0x2c>
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e06e      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2221      	movs	r2, #33	; 0x21
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003952:	f7fe f875 	bl	8001a40 <HAL_GetTick>
 8003956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396c:	d108      	bne.n	8003980 <HAL_UART_Transmit+0x6c>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e003      	b.n	8003988 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003988:	e02e      	b.n	80039e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fb31 	bl	8003ffc <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e03a      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	3302      	adds	r3, #2
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e007      	b.n	80039da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3301      	adds	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1cb      	bne.n	800398a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2140      	movs	r1, #64	; 0x40
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fafd 	bl	8003ffc <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e006      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e000      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	4613      	mov	r3, r2
 8003a36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d121      	bne.n	8003a88 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_UART_Transmit_IT+0x26>
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e01a      	b.n	8003a8a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	88fa      	ldrh	r2, [r7, #6]
 8003a5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2221      	movs	r2, #33	; 0x21
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a82:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b0ba      	sub	sp, #232	; 0xe8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_UART_IRQHandler+0x66>
 8003aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fbb8 	bl	800426c <UART_Receive_IT>
      return;
 8003afc:	e25b      	b.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80de 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x22c>
 8003b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80d1 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_UART_IRQHandler+0xae>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_UART_IRQHandler+0xd2>
 8003b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f043 0202 	orr.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_UART_IRQHandler+0xf6>
 8003b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f043 0204 	orr.w	r2, r3, #4
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d011      	beq.n	8003bbe <HAL_UART_IRQHandler+0x126>
 8003b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d105      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f043 0208 	orr.w	r2, r3, #8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 81f2 	beq.w	8003fac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_UART_IRQHandler+0x14e>
 8003bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fb43 	bl	800426c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_UART_IRQHandler+0x17a>
 8003c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d04f      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa4b 	bl	80040ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d141      	bne.n	8003caa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1d9      	bne.n	8003c26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d013      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	4a7e      	ldr	r2, [pc, #504]	; (8003e78 <HAL_UART_IRQHandler+0x3e0>)
 8003c80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fc7d 	bl	8002586 <HAL_DMA_Abort_IT>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d016      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	e00e      	b.n	8003cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f994 	bl	8003fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	e00a      	b.n	8003cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f990 	bl	8003fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	e006      	b.n	8003cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f98c 	bl	8003fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003cbe:	e175      	b.n	8003fac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc0:	bf00      	nop
    return;
 8003cc2:	e173      	b.n	8003fac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	f040 814f 	bne.w	8003f6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8148 	beq.w	8003f6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8141 	beq.w	8003f6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	f040 80b6 	bne.w	8003e7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8145 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	f080 813e 	bcs.w	8003fb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d46:	f000 8088 	beq.w	8003e5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1d9      	bne.n	8003d4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e1      	bne.n	8003d96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3314      	adds	r3, #20
 8003dd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003df6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003df8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e3      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e2a:	f023 0310 	bic.w	r3, r3, #16
 8003e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e3      	bne.n	8003e18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe fb26 	bl	80024a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f8b7 	bl	8003fe4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e76:	e09b      	b.n	8003fb0 <HAL_UART_IRQHandler+0x518>
 8003e78:	08004175 	.word	0x08004175
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 808e 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8089 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ec8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e3      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003efe:	633a      	str	r2, [r7, #48]	; 0x30
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e3      	bne.n	8003eda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0310 	bic.w	r3, r3, #16
 8003f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f44:	61fa      	str	r2, [r7, #28]
 8003f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	69b9      	ldr	r1, [r7, #24]
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	617b      	str	r3, [r7, #20]
   return(result);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e3      	bne.n	8003f20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f62:	4619      	mov	r1, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f83d 	bl	8003fe4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f6a:	e023      	b.n	8003fb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <HAL_UART_IRQHandler+0x4f4>
 8003f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f909 	bl	800419c <UART_Transmit_IT>
    return;
 8003f8a:	e014      	b.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
 8003f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f949 	bl	800423c <UART_EndTransmit_IT>
    return;
 8003faa:	e004      	b.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fac:	bf00      	nop
 8003fae:	e002      	b.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fb4:	bf00      	nop
  }
}
 8003fb6:	37e8      	adds	r7, #232	; 0xe8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400c:	e03b      	b.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004014:	d037      	beq.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fd fd13 	bl	8001a40 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	6a3a      	ldr	r2, [r7, #32]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <UART_WaitOnFlagUntilTimeout+0x30>
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e03a      	b.n	80040a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d023      	beq.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b80      	cmp	r3, #128	; 0x80
 8004042:	d020      	beq.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d01d      	beq.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b08      	cmp	r3, #8
 8004056:	d116      	bne.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f81d 	bl	80040ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2208      	movs	r2, #8
 8004078:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e00f      	b.n	80040a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4013      	ands	r3, r2
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d0b4      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b095      	sub	sp, #84	; 0x54
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	330c      	adds	r3, #12
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040d6:	643a      	str	r2, [r7, #64]	; 0x40
 80040d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e5      	bne.n	80040b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3314      	adds	r3, #20
 80040f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	64bb      	str	r3, [r7, #72]	; 0x48
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800410a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e5      	bne.n	80040ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	2b01      	cmp	r3, #1
 8004124:	d119      	bne.n	800415a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	60bb      	str	r3, [r7, #8]
   return(result);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f023 0310 	bic.w	r3, r3, #16
 800413c:	647b      	str	r3, [r7, #68]	; 0x44
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004146:	61ba      	str	r2, [r7, #24]
 8004148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6979      	ldr	r1, [r7, #20]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	613b      	str	r3, [r7, #16]
   return(result);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004168:	bf00      	nop
 800416a:	3754      	adds	r7, #84	; 0x54
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff ff1e 	bl	8003fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b21      	cmp	r3, #33	; 0x21
 80041ae:	d13e      	bne.n	800422e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b8:	d114      	bne.n	80041e4 <UART_Transmit_IT+0x48>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d110      	bne.n	80041e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	1c9a      	adds	r2, r3, #2
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	621a      	str	r2, [r3, #32]
 80041e2:	e008      	b.n	80041f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	1c59      	adds	r1, r3, #1
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6211      	str	r1, [r2, #32]
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29b      	uxth	r3, r3
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4619      	mov	r1, r3
 8004204:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004218:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004228:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e000      	b.n	8004230 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800422e:	2302      	movs	r3, #2
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004252:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7fc fe5d 	bl	8000f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	; 0x30
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b22      	cmp	r3, #34	; 0x22
 800427e:	f040 80ae 	bne.w	80043de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	d117      	bne.n	80042bc <UART_Receive_IT+0x50>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d113      	bne.n	80042bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	1c9a      	adds	r2, r3, #2
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	629a      	str	r2, [r3, #40]	; 0x28
 80042ba:	e026      	b.n	800430a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ce:	d007      	beq.n	80042e0 <UART_Receive_IT+0x74>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <UART_Receive_IT+0x82>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d106      	bne.n	80042ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	e008      	b.n	8004300 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	4619      	mov	r1, r3
 8004318:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800431a:	2b00      	cmp	r3, #0
 800431c:	d15d      	bne.n	80043da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0220 	bic.w	r2, r2, #32
 800432c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800433c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	d135      	bne.n	80043d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	613b      	str	r3, [r7, #16]
   return(result);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438a:	623a      	str	r2, [r7, #32]
 800438c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	69f9      	ldr	r1, [r7, #28]
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	61bb      	str	r3, [r7, #24]
   return(result);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e5      	bne.n	800436a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d10a      	bne.n	80043c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff fe0b 	bl	8003fe4 <HAL_UARTEx_RxEventCallback>
 80043ce:	e002      	b.n	80043d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fdf3 	bl	8003fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e002      	b.n	80043e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043de:	2302      	movs	r3, #2
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3730      	adds	r7, #48	; 0x30
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ec:	b0c0      	sub	sp, #256	; 0x100
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	68d9      	ldr	r1, [r3, #12]
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	ea40 0301 	orr.w	r3, r0, r1
 8004410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	431a      	orrs	r2, r3
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	431a      	orrs	r2, r3
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004440:	f021 010c 	bic.w	r1, r1, #12
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800444e:	430b      	orrs	r3, r1
 8004450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	6999      	ldr	r1, [r3, #24]
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	ea40 0301 	orr.w	r3, r0, r1
 800446e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b8f      	ldr	r3, [pc, #572]	; (80046b4 <UART_SetConfig+0x2cc>)
 8004478:	429a      	cmp	r2, r3
 800447a:	d005      	beq.n	8004488 <UART_SetConfig+0xa0>
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b8d      	ldr	r3, [pc, #564]	; (80046b8 <UART_SetConfig+0x2d0>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d104      	bne.n	8004492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004488:	f7fe feda 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 800448c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004490:	e003      	b.n	800449a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004492:	f7fe fec1 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8004496:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a4:	f040 810c 	bne.w	80046c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	1891      	adds	r1, r2, r2
 80044c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80044c2:	415b      	adcs	r3, r3
 80044c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044ca:	4621      	mov	r1, r4
 80044cc:	eb12 0801 	adds.w	r8, r2, r1
 80044d0:	4629      	mov	r1, r5
 80044d2:	eb43 0901 	adc.w	r9, r3, r1
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ea:	4690      	mov	r8, r2
 80044ec:	4699      	mov	r9, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	eb18 0303 	adds.w	r3, r8, r3
 80044f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044f8:	462b      	mov	r3, r5
 80044fa:	eb49 0303 	adc.w	r3, r9, r3
 80044fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800450e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004516:	460b      	mov	r3, r1
 8004518:	18db      	adds	r3, r3, r3
 800451a:	653b      	str	r3, [r7, #80]	; 0x50
 800451c:	4613      	mov	r3, r2
 800451e:	eb42 0303 	adc.w	r3, r2, r3
 8004522:	657b      	str	r3, [r7, #84]	; 0x54
 8004524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800452c:	f7fc fa9e 	bl	8000a6c <__aeabi_uldivmod>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4b61      	ldr	r3, [pc, #388]	; (80046bc <UART_SetConfig+0x2d4>)
 8004536:	fba3 2302 	umull	r2, r3, r3, r2
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	011c      	lsls	r4, r3, #4
 800453e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004548:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800454c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	1891      	adds	r1, r2, r2
 8004556:	64b9      	str	r1, [r7, #72]	; 0x48
 8004558:	415b      	adcs	r3, r3
 800455a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800455c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004560:	4641      	mov	r1, r8
 8004562:	eb12 0a01 	adds.w	sl, r2, r1
 8004566:	4649      	mov	r1, r9
 8004568:	eb43 0b01 	adc.w	fp, r3, r1
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800457c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004580:	4692      	mov	sl, r2
 8004582:	469b      	mov	fp, r3
 8004584:	4643      	mov	r3, r8
 8004586:	eb1a 0303 	adds.w	r3, sl, r3
 800458a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800458e:	464b      	mov	r3, r9
 8004590:	eb4b 0303 	adc.w	r3, fp, r3
 8004594:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045ac:	460b      	mov	r3, r1
 80045ae:	18db      	adds	r3, r3, r3
 80045b0:	643b      	str	r3, [r7, #64]	; 0x40
 80045b2:	4613      	mov	r3, r2
 80045b4:	eb42 0303 	adc.w	r3, r2, r3
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045c2:	f7fc fa53 	bl	8000a6c <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	4b3b      	ldr	r3, [pc, #236]	; (80046bc <UART_SetConfig+0x2d4>)
 80045ce:	fba3 2301 	umull	r2, r3, r3, r1
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	2264      	movs	r2, #100	; 0x64
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	1acb      	subs	r3, r1, r3
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045e2:	4b36      	ldr	r3, [pc, #216]	; (80046bc <UART_SetConfig+0x2d4>)
 80045e4:	fba3 2302 	umull	r2, r3, r3, r2
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045f0:	441c      	add	r4, r3
 80045f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004604:	4642      	mov	r2, r8
 8004606:	464b      	mov	r3, r9
 8004608:	1891      	adds	r1, r2, r2
 800460a:	63b9      	str	r1, [r7, #56]	; 0x38
 800460c:	415b      	adcs	r3, r3
 800460e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004614:	4641      	mov	r1, r8
 8004616:	1851      	adds	r1, r2, r1
 8004618:	6339      	str	r1, [r7, #48]	; 0x30
 800461a:	4649      	mov	r1, r9
 800461c:	414b      	adcs	r3, r1
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800462c:	4659      	mov	r1, fp
 800462e:	00cb      	lsls	r3, r1, #3
 8004630:	4651      	mov	r1, sl
 8004632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004636:	4651      	mov	r1, sl
 8004638:	00ca      	lsls	r2, r1, #3
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	4603      	mov	r3, r0
 8004640:	4642      	mov	r2, r8
 8004642:	189b      	adds	r3, r3, r2
 8004644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004648:	464b      	mov	r3, r9
 800464a:	460a      	mov	r2, r1
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004660:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004668:	460b      	mov	r3, r1
 800466a:	18db      	adds	r3, r3, r3
 800466c:	62bb      	str	r3, [r7, #40]	; 0x28
 800466e:	4613      	mov	r3, r2
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800467a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800467e:	f7fc f9f5 	bl	8000a6c <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <UART_SetConfig+0x2d4>)
 8004688:	fba3 1302 	umull	r1, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	2164      	movs	r1, #100	; 0x64
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	3332      	adds	r3, #50	; 0x32
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <UART_SetConfig+0x2d4>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	f003 0207 	and.w	r2, r3, #7
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4422      	add	r2, r4
 80046ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046b0:	e106      	b.n	80048c0 <UART_SetConfig+0x4d8>
 80046b2:	bf00      	nop
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40011400 	.word	0x40011400
 80046bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046d2:	4642      	mov	r2, r8
 80046d4:	464b      	mov	r3, r9
 80046d6:	1891      	adds	r1, r2, r2
 80046d8:	6239      	str	r1, [r7, #32]
 80046da:	415b      	adcs	r3, r3
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
 80046de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046e2:	4641      	mov	r1, r8
 80046e4:	1854      	adds	r4, r2, r1
 80046e6:	4649      	mov	r1, r9
 80046e8:	eb43 0501 	adc.w	r5, r3, r1
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	00eb      	lsls	r3, r5, #3
 80046f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046fa:	00e2      	lsls	r2, r4, #3
 80046fc:	4614      	mov	r4, r2
 80046fe:	461d      	mov	r5, r3
 8004700:	4643      	mov	r3, r8
 8004702:	18e3      	adds	r3, r4, r3
 8004704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004708:	464b      	mov	r3, r9
 800470a:	eb45 0303 	adc.w	r3, r5, r3
 800470e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800471e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800472e:	4629      	mov	r1, r5
 8004730:	008b      	lsls	r3, r1, #2
 8004732:	4621      	mov	r1, r4
 8004734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004738:	4621      	mov	r1, r4
 800473a:	008a      	lsls	r2, r1, #2
 800473c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004740:	f7fc f994 	bl	8000a6c <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4b60      	ldr	r3, [pc, #384]	; (80048cc <UART_SetConfig+0x4e4>)
 800474a:	fba3 2302 	umull	r2, r3, r3, r2
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	011c      	lsls	r4, r3, #4
 8004752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800475c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004764:	4642      	mov	r2, r8
 8004766:	464b      	mov	r3, r9
 8004768:	1891      	adds	r1, r2, r2
 800476a:	61b9      	str	r1, [r7, #24]
 800476c:	415b      	adcs	r3, r3
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004774:	4641      	mov	r1, r8
 8004776:	1851      	adds	r1, r2, r1
 8004778:	6139      	str	r1, [r7, #16]
 800477a:	4649      	mov	r1, r9
 800477c:	414b      	adcs	r3, r1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800478c:	4659      	mov	r1, fp
 800478e:	00cb      	lsls	r3, r1, #3
 8004790:	4651      	mov	r1, sl
 8004792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004796:	4651      	mov	r1, sl
 8004798:	00ca      	lsls	r2, r1, #3
 800479a:	4610      	mov	r0, r2
 800479c:	4619      	mov	r1, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	4642      	mov	r2, r8
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047a8:	464b      	mov	r3, r9
 80047aa:	460a      	mov	r2, r1
 80047ac:	eb42 0303 	adc.w	r3, r2, r3
 80047b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80047be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047cc:	4649      	mov	r1, r9
 80047ce:	008b      	lsls	r3, r1, #2
 80047d0:	4641      	mov	r1, r8
 80047d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d6:	4641      	mov	r1, r8
 80047d8:	008a      	lsls	r2, r1, #2
 80047da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047de:	f7fc f945 	bl	8000a6c <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	4b38      	ldr	r3, [pc, #224]	; (80048cc <UART_SetConfig+0x4e4>)
 80047ea:	fba3 2301 	umull	r2, r3, r3, r1
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2264      	movs	r2, #100	; 0x64
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	1acb      	subs	r3, r1, r3
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	3332      	adds	r3, #50	; 0x32
 80047fc:	4a33      	ldr	r2, [pc, #204]	; (80048cc <UART_SetConfig+0x4e4>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004808:	441c      	add	r4, r3
 800480a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480e:	2200      	movs	r2, #0
 8004810:	673b      	str	r3, [r7, #112]	; 0x70
 8004812:	677a      	str	r2, [r7, #116]	; 0x74
 8004814:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004818:	4642      	mov	r2, r8
 800481a:	464b      	mov	r3, r9
 800481c:	1891      	adds	r1, r2, r2
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	415b      	adcs	r3, r3
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004828:	4641      	mov	r1, r8
 800482a:	1851      	adds	r1, r2, r1
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	4649      	mov	r1, r9
 8004830:	414b      	adcs	r3, r1
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004840:	4659      	mov	r1, fp
 8004842:	00cb      	lsls	r3, r1, #3
 8004844:	4651      	mov	r1, sl
 8004846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484a:	4651      	mov	r1, sl
 800484c:	00ca      	lsls	r2, r1, #3
 800484e:	4610      	mov	r0, r2
 8004850:	4619      	mov	r1, r3
 8004852:	4603      	mov	r3, r0
 8004854:	4642      	mov	r2, r8
 8004856:	189b      	adds	r3, r3, r2
 8004858:	66bb      	str	r3, [r7, #104]	; 0x68
 800485a:	464b      	mov	r3, r9
 800485c:	460a      	mov	r2, r1
 800485e:	eb42 0303 	adc.w	r3, r2, r3
 8004862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	663b      	str	r3, [r7, #96]	; 0x60
 800486e:	667a      	str	r2, [r7, #100]	; 0x64
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800487c:	4649      	mov	r1, r9
 800487e:	008b      	lsls	r3, r1, #2
 8004880:	4641      	mov	r1, r8
 8004882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004886:	4641      	mov	r1, r8
 8004888:	008a      	lsls	r2, r1, #2
 800488a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800488e:	f7fc f8ed 	bl	8000a6c <__aeabi_uldivmod>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <UART_SetConfig+0x4e4>)
 8004898:	fba3 1302 	umull	r1, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	2164      	movs	r1, #100	; 0x64
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	3332      	adds	r3, #50	; 0x32
 80048aa:	4a08      	ldr	r2, [pc, #32]	; (80048cc <UART_SetConfig+0x4e4>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	f003 020f 	and.w	r2, r3, #15
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4422      	add	r2, r4
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048c6:	46bd      	mov	sp, r7
 80048c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048cc:	51eb851f 	.word	0x51eb851f

080048d0 <siprintf>:
 80048d0:	b40e      	push	{r1, r2, r3}
 80048d2:	b500      	push	{lr}
 80048d4:	b09c      	sub	sp, #112	; 0x70
 80048d6:	ab1d      	add	r3, sp, #116	; 0x74
 80048d8:	9002      	str	r0, [sp, #8]
 80048da:	9006      	str	r0, [sp, #24]
 80048dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048e0:	4809      	ldr	r0, [pc, #36]	; (8004908 <siprintf+0x38>)
 80048e2:	9107      	str	r1, [sp, #28]
 80048e4:	9104      	str	r1, [sp, #16]
 80048e6:	4909      	ldr	r1, [pc, #36]	; (800490c <siprintf+0x3c>)
 80048e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ec:	9105      	str	r1, [sp, #20]
 80048ee:	6800      	ldr	r0, [r0, #0]
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	a902      	add	r1, sp, #8
 80048f4:	f000 f89a 	bl	8004a2c <_svfiprintf_r>
 80048f8:	9b02      	ldr	r3, [sp, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	b01c      	add	sp, #112	; 0x70
 8004900:	f85d eb04 	ldr.w	lr, [sp], #4
 8004904:	b003      	add	sp, #12
 8004906:	4770      	bx	lr
 8004908:	20000058 	.word	0x20000058
 800490c:	ffff0208 	.word	0xffff0208

08004910 <memset>:
 8004910:	4402      	add	r2, r0
 8004912:	4603      	mov	r3, r0
 8004914:	4293      	cmp	r3, r2
 8004916:	d100      	bne.n	800491a <memset+0xa>
 8004918:	4770      	bx	lr
 800491a:	f803 1b01 	strb.w	r1, [r3], #1
 800491e:	e7f9      	b.n	8004914 <memset+0x4>

08004920 <__errno>:
 8004920:	4b01      	ldr	r3, [pc, #4]	; (8004928 <__errno+0x8>)
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000058 	.word	0x20000058

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4d0d      	ldr	r5, [pc, #52]	; (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	; (8004968 <__libc_init_array+0x3c>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2600      	movs	r6, #0
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4d0b      	ldr	r5, [pc, #44]	; (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	; (8004970 <__libc_init_array+0x44>)
 8004940:	f000 fc6a 	bl	8005218 <_init>
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2600      	movs	r6, #0
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f855 3b04 	ldr.w	r3, [r5], #4
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f855 3b04 	ldr.w	r3, [r5], #4
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	080052dc 	.word	0x080052dc
 8004968:	080052dc 	.word	0x080052dc
 800496c:	080052dc 	.word	0x080052dc
 8004970:	080052e0 	.word	0x080052e0

08004974 <__retarget_lock_acquire_recursive>:
 8004974:	4770      	bx	lr

08004976 <__retarget_lock_release_recursive>:
 8004976:	4770      	bx	lr

08004978 <__ssputs_r>:
 8004978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800497c:	688e      	ldr	r6, [r1, #8]
 800497e:	461f      	mov	r7, r3
 8004980:	42be      	cmp	r6, r7
 8004982:	680b      	ldr	r3, [r1, #0]
 8004984:	4682      	mov	sl, r0
 8004986:	460c      	mov	r4, r1
 8004988:	4690      	mov	r8, r2
 800498a:	d82c      	bhi.n	80049e6 <__ssputs_r+0x6e>
 800498c:	898a      	ldrh	r2, [r1, #12]
 800498e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004992:	d026      	beq.n	80049e2 <__ssputs_r+0x6a>
 8004994:	6965      	ldr	r5, [r4, #20]
 8004996:	6909      	ldr	r1, [r1, #16]
 8004998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800499c:	eba3 0901 	sub.w	r9, r3, r1
 80049a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049a4:	1c7b      	adds	r3, r7, #1
 80049a6:	444b      	add	r3, r9
 80049a8:	106d      	asrs	r5, r5, #1
 80049aa:	429d      	cmp	r5, r3
 80049ac:	bf38      	it	cc
 80049ae:	461d      	movcc	r5, r3
 80049b0:	0553      	lsls	r3, r2, #21
 80049b2:	d527      	bpl.n	8004a04 <__ssputs_r+0x8c>
 80049b4:	4629      	mov	r1, r5
 80049b6:	f000 f957 	bl	8004c68 <_malloc_r>
 80049ba:	4606      	mov	r6, r0
 80049bc:	b360      	cbz	r0, 8004a18 <__ssputs_r+0xa0>
 80049be:	6921      	ldr	r1, [r4, #16]
 80049c0:	464a      	mov	r2, r9
 80049c2:	f000 fbc7 	bl	8005154 <memcpy>
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d0:	81a3      	strh	r3, [r4, #12]
 80049d2:	6126      	str	r6, [r4, #16]
 80049d4:	6165      	str	r5, [r4, #20]
 80049d6:	444e      	add	r6, r9
 80049d8:	eba5 0509 	sub.w	r5, r5, r9
 80049dc:	6026      	str	r6, [r4, #0]
 80049de:	60a5      	str	r5, [r4, #8]
 80049e0:	463e      	mov	r6, r7
 80049e2:	42be      	cmp	r6, r7
 80049e4:	d900      	bls.n	80049e8 <__ssputs_r+0x70>
 80049e6:	463e      	mov	r6, r7
 80049e8:	6820      	ldr	r0, [r4, #0]
 80049ea:	4632      	mov	r2, r6
 80049ec:	4641      	mov	r1, r8
 80049ee:	f000 fb86 	bl	80050fe <memmove>
 80049f2:	68a3      	ldr	r3, [r4, #8]
 80049f4:	1b9b      	subs	r3, r3, r6
 80049f6:	60a3      	str	r3, [r4, #8]
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	4433      	add	r3, r6
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	2000      	movs	r0, #0
 8004a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a04:	462a      	mov	r2, r5
 8004a06:	f000 fb4b 	bl	80050a0 <_realloc_r>
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d1e0      	bne.n	80049d2 <__ssputs_r+0x5a>
 8004a10:	6921      	ldr	r1, [r4, #16]
 8004a12:	4650      	mov	r0, sl
 8004a14:	f000 fbac 	bl	8005170 <_free_r>
 8004a18:	230c      	movs	r3, #12
 8004a1a:	f8ca 3000 	str.w	r3, [sl]
 8004a1e:	89a3      	ldrh	r3, [r4, #12]
 8004a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a24:	81a3      	strh	r3, [r4, #12]
 8004a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a2a:	e7e9      	b.n	8004a00 <__ssputs_r+0x88>

08004a2c <_svfiprintf_r>:
 8004a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a30:	4698      	mov	r8, r3
 8004a32:	898b      	ldrh	r3, [r1, #12]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	b09d      	sub	sp, #116	; 0x74
 8004a38:	4607      	mov	r7, r0
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	4614      	mov	r4, r2
 8004a3e:	d50e      	bpl.n	8004a5e <_svfiprintf_r+0x32>
 8004a40:	690b      	ldr	r3, [r1, #16]
 8004a42:	b963      	cbnz	r3, 8004a5e <_svfiprintf_r+0x32>
 8004a44:	2140      	movs	r1, #64	; 0x40
 8004a46:	f000 f90f 	bl	8004c68 <_malloc_r>
 8004a4a:	6028      	str	r0, [r5, #0]
 8004a4c:	6128      	str	r0, [r5, #16]
 8004a4e:	b920      	cbnz	r0, 8004a5a <_svfiprintf_r+0x2e>
 8004a50:	230c      	movs	r3, #12
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a58:	e0d0      	b.n	8004bfc <_svfiprintf_r+0x1d0>
 8004a5a:	2340      	movs	r3, #64	; 0x40
 8004a5c:	616b      	str	r3, [r5, #20]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9309      	str	r3, [sp, #36]	; 0x24
 8004a62:	2320      	movs	r3, #32
 8004a64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a6c:	2330      	movs	r3, #48	; 0x30
 8004a6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c14 <_svfiprintf_r+0x1e8>
 8004a72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a76:	f04f 0901 	mov.w	r9, #1
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	469a      	mov	sl, r3
 8004a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a82:	b10a      	cbz	r2, 8004a88 <_svfiprintf_r+0x5c>
 8004a84:	2a25      	cmp	r2, #37	; 0x25
 8004a86:	d1f9      	bne.n	8004a7c <_svfiprintf_r+0x50>
 8004a88:	ebba 0b04 	subs.w	fp, sl, r4
 8004a8c:	d00b      	beq.n	8004aa6 <_svfiprintf_r+0x7a>
 8004a8e:	465b      	mov	r3, fp
 8004a90:	4622      	mov	r2, r4
 8004a92:	4629      	mov	r1, r5
 8004a94:	4638      	mov	r0, r7
 8004a96:	f7ff ff6f 	bl	8004978 <__ssputs_r>
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f000 80a9 	beq.w	8004bf2 <_svfiprintf_r+0x1c6>
 8004aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aa2:	445a      	add	r2, fp
 8004aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8004aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80a1 	beq.w	8004bf2 <_svfiprintf_r+0x1c6>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aba:	f10a 0a01 	add.w	sl, sl, #1
 8004abe:	9304      	str	r3, [sp, #16]
 8004ac0:	9307      	str	r3, [sp, #28]
 8004ac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ac6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ac8:	4654      	mov	r4, sl
 8004aca:	2205      	movs	r2, #5
 8004acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad0:	4850      	ldr	r0, [pc, #320]	; (8004c14 <_svfiprintf_r+0x1e8>)
 8004ad2:	f7fb fb8d 	bl	80001f0 <memchr>
 8004ad6:	9a04      	ldr	r2, [sp, #16]
 8004ad8:	b9d8      	cbnz	r0, 8004b12 <_svfiprintf_r+0xe6>
 8004ada:	06d0      	lsls	r0, r2, #27
 8004adc:	bf44      	itt	mi
 8004ade:	2320      	movmi	r3, #32
 8004ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ae4:	0711      	lsls	r1, r2, #28
 8004ae6:	bf44      	itt	mi
 8004ae8:	232b      	movmi	r3, #43	; 0x2b
 8004aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aee:	f89a 3000 	ldrb.w	r3, [sl]
 8004af2:	2b2a      	cmp	r3, #42	; 0x2a
 8004af4:	d015      	beq.n	8004b22 <_svfiprintf_r+0xf6>
 8004af6:	9a07      	ldr	r2, [sp, #28]
 8004af8:	4654      	mov	r4, sl
 8004afa:	2000      	movs	r0, #0
 8004afc:	f04f 0c0a 	mov.w	ip, #10
 8004b00:	4621      	mov	r1, r4
 8004b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b06:	3b30      	subs	r3, #48	; 0x30
 8004b08:	2b09      	cmp	r3, #9
 8004b0a:	d94d      	bls.n	8004ba8 <_svfiprintf_r+0x17c>
 8004b0c:	b1b0      	cbz	r0, 8004b3c <_svfiprintf_r+0x110>
 8004b0e:	9207      	str	r2, [sp, #28]
 8004b10:	e014      	b.n	8004b3c <_svfiprintf_r+0x110>
 8004b12:	eba0 0308 	sub.w	r3, r0, r8
 8004b16:	fa09 f303 	lsl.w	r3, r9, r3
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	9304      	str	r3, [sp, #16]
 8004b1e:	46a2      	mov	sl, r4
 8004b20:	e7d2      	b.n	8004ac8 <_svfiprintf_r+0x9c>
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	1d19      	adds	r1, r3, #4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	9103      	str	r1, [sp, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bfbb      	ittet	lt
 8004b2e:	425b      	neglt	r3, r3
 8004b30:	f042 0202 	orrlt.w	r2, r2, #2
 8004b34:	9307      	strge	r3, [sp, #28]
 8004b36:	9307      	strlt	r3, [sp, #28]
 8004b38:	bfb8      	it	lt
 8004b3a:	9204      	strlt	r2, [sp, #16]
 8004b3c:	7823      	ldrb	r3, [r4, #0]
 8004b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b40:	d10c      	bne.n	8004b5c <_svfiprintf_r+0x130>
 8004b42:	7863      	ldrb	r3, [r4, #1]
 8004b44:	2b2a      	cmp	r3, #42	; 0x2a
 8004b46:	d134      	bne.n	8004bb2 <_svfiprintf_r+0x186>
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	1d1a      	adds	r2, r3, #4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	9203      	str	r2, [sp, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bfb8      	it	lt
 8004b54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b58:	3402      	adds	r4, #2
 8004b5a:	9305      	str	r3, [sp, #20]
 8004b5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004c24 <_svfiprintf_r+0x1f8>
 8004b60:	7821      	ldrb	r1, [r4, #0]
 8004b62:	2203      	movs	r2, #3
 8004b64:	4650      	mov	r0, sl
 8004b66:	f7fb fb43 	bl	80001f0 <memchr>
 8004b6a:	b138      	cbz	r0, 8004b7c <_svfiprintf_r+0x150>
 8004b6c:	9b04      	ldr	r3, [sp, #16]
 8004b6e:	eba0 000a 	sub.w	r0, r0, sl
 8004b72:	2240      	movs	r2, #64	; 0x40
 8004b74:	4082      	lsls	r2, r0
 8004b76:	4313      	orrs	r3, r2
 8004b78:	3401      	adds	r4, #1
 8004b7a:	9304      	str	r3, [sp, #16]
 8004b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b80:	4825      	ldr	r0, [pc, #148]	; (8004c18 <_svfiprintf_r+0x1ec>)
 8004b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b86:	2206      	movs	r2, #6
 8004b88:	f7fb fb32 	bl	80001f0 <memchr>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d038      	beq.n	8004c02 <_svfiprintf_r+0x1d6>
 8004b90:	4b22      	ldr	r3, [pc, #136]	; (8004c1c <_svfiprintf_r+0x1f0>)
 8004b92:	bb1b      	cbnz	r3, 8004bdc <_svfiprintf_r+0x1b0>
 8004b94:	9b03      	ldr	r3, [sp, #12]
 8004b96:	3307      	adds	r3, #7
 8004b98:	f023 0307 	bic.w	r3, r3, #7
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	9303      	str	r3, [sp, #12]
 8004ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ba2:	4433      	add	r3, r6
 8004ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba6:	e768      	b.n	8004a7a <_svfiprintf_r+0x4e>
 8004ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bac:	460c      	mov	r4, r1
 8004bae:	2001      	movs	r0, #1
 8004bb0:	e7a6      	b.n	8004b00 <_svfiprintf_r+0xd4>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	3401      	adds	r4, #1
 8004bb6:	9305      	str	r3, [sp, #20]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f04f 0c0a 	mov.w	ip, #10
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bc4:	3a30      	subs	r2, #48	; 0x30
 8004bc6:	2a09      	cmp	r2, #9
 8004bc8:	d903      	bls.n	8004bd2 <_svfiprintf_r+0x1a6>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0c6      	beq.n	8004b5c <_svfiprintf_r+0x130>
 8004bce:	9105      	str	r1, [sp, #20]
 8004bd0:	e7c4      	b.n	8004b5c <_svfiprintf_r+0x130>
 8004bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e7f0      	b.n	8004bbe <_svfiprintf_r+0x192>
 8004bdc:	ab03      	add	r3, sp, #12
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	462a      	mov	r2, r5
 8004be2:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <_svfiprintf_r+0x1f4>)
 8004be4:	a904      	add	r1, sp, #16
 8004be6:	4638      	mov	r0, r7
 8004be8:	f3af 8000 	nop.w
 8004bec:	1c42      	adds	r2, r0, #1
 8004bee:	4606      	mov	r6, r0
 8004bf0:	d1d6      	bne.n	8004ba0 <_svfiprintf_r+0x174>
 8004bf2:	89ab      	ldrh	r3, [r5, #12]
 8004bf4:	065b      	lsls	r3, r3, #25
 8004bf6:	f53f af2d 	bmi.w	8004a54 <_svfiprintf_r+0x28>
 8004bfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bfc:	b01d      	add	sp, #116	; 0x74
 8004bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c02:	ab03      	add	r3, sp, #12
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	462a      	mov	r2, r5
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <_svfiprintf_r+0x1f4>)
 8004c0a:	a904      	add	r1, sp, #16
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	f000 f919 	bl	8004e44 <_printf_i>
 8004c12:	e7eb      	b.n	8004bec <_svfiprintf_r+0x1c0>
 8004c14:	080052a0 	.word	0x080052a0
 8004c18:	080052aa 	.word	0x080052aa
 8004c1c:	00000000 	.word	0x00000000
 8004c20:	08004979 	.word	0x08004979
 8004c24:	080052a6 	.word	0x080052a6

08004c28 <sbrk_aligned>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	4e0e      	ldr	r6, [pc, #56]	; (8004c64 <sbrk_aligned+0x3c>)
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	6831      	ldr	r1, [r6, #0]
 8004c30:	4605      	mov	r5, r0
 8004c32:	b911      	cbnz	r1, 8004c3a <sbrk_aligned+0x12>
 8004c34:	f000 fa7e 	bl	8005134 <_sbrk_r>
 8004c38:	6030      	str	r0, [r6, #0]
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f000 fa79 	bl	8005134 <_sbrk_r>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d00a      	beq.n	8004c5c <sbrk_aligned+0x34>
 8004c46:	1cc4      	adds	r4, r0, #3
 8004c48:	f024 0403 	bic.w	r4, r4, #3
 8004c4c:	42a0      	cmp	r0, r4
 8004c4e:	d007      	beq.n	8004c60 <sbrk_aligned+0x38>
 8004c50:	1a21      	subs	r1, r4, r0
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 fa6e 	bl	8005134 <_sbrk_r>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d101      	bne.n	8004c60 <sbrk_aligned+0x38>
 8004c5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004c60:	4620      	mov	r0, r4
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
 8004c64:	20000bc4 	.word	0x20000bc4

08004c68 <_malloc_r>:
 8004c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c6c:	1ccd      	adds	r5, r1, #3
 8004c6e:	f025 0503 	bic.w	r5, r5, #3
 8004c72:	3508      	adds	r5, #8
 8004c74:	2d0c      	cmp	r5, #12
 8004c76:	bf38      	it	cc
 8004c78:	250c      	movcc	r5, #12
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	db01      	blt.n	8004c84 <_malloc_r+0x1c>
 8004c80:	42a9      	cmp	r1, r5
 8004c82:	d905      	bls.n	8004c90 <_malloc_r+0x28>
 8004c84:	230c      	movs	r3, #12
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	2600      	movs	r6, #0
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d64 <_malloc_r+0xfc>
 8004c94:	f000 f9f8 	bl	8005088 <__malloc_lock>
 8004c98:	f8d8 3000 	ldr.w	r3, [r8]
 8004c9c:	461c      	mov	r4, r3
 8004c9e:	bb5c      	cbnz	r4, 8004cf8 <_malloc_r+0x90>
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	f7ff ffc0 	bl	8004c28 <sbrk_aligned>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	4604      	mov	r4, r0
 8004cac:	d155      	bne.n	8004d5a <_malloc_r+0xf2>
 8004cae:	f8d8 4000 	ldr.w	r4, [r8]
 8004cb2:	4626      	mov	r6, r4
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	d145      	bne.n	8004d44 <_malloc_r+0xdc>
 8004cb8:	2c00      	cmp	r4, #0
 8004cba:	d048      	beq.n	8004d4e <_malloc_r+0xe6>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	eb04 0903 	add.w	r9, r4, r3
 8004cc6:	f000 fa35 	bl	8005134 <_sbrk_r>
 8004cca:	4581      	cmp	r9, r0
 8004ccc:	d13f      	bne.n	8004d4e <_malloc_r+0xe6>
 8004cce:	6821      	ldr	r1, [r4, #0]
 8004cd0:	1a6d      	subs	r5, r5, r1
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f7ff ffa7 	bl	8004c28 <sbrk_aligned>
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d037      	beq.n	8004d4e <_malloc_r+0xe6>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	442b      	add	r3, r5
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d038      	beq.n	8004d5e <_malloc_r+0xf6>
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	42a2      	cmp	r2, r4
 8004cf0:	d12b      	bne.n	8004d4a <_malloc_r+0xe2>
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	e00f      	b.n	8004d18 <_malloc_r+0xb0>
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	1b52      	subs	r2, r2, r5
 8004cfc:	d41f      	bmi.n	8004d3e <_malloc_r+0xd6>
 8004cfe:	2a0b      	cmp	r2, #11
 8004d00:	d917      	bls.n	8004d32 <_malloc_r+0xca>
 8004d02:	1961      	adds	r1, r4, r5
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	6025      	str	r5, [r4, #0]
 8004d08:	bf18      	it	ne
 8004d0a:	6059      	strne	r1, [r3, #4]
 8004d0c:	6863      	ldr	r3, [r4, #4]
 8004d0e:	bf08      	it	eq
 8004d10:	f8c8 1000 	streq.w	r1, [r8]
 8004d14:	5162      	str	r2, [r4, r5]
 8004d16:	604b      	str	r3, [r1, #4]
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f104 060b 	add.w	r6, r4, #11
 8004d1e:	f000 f9b9 	bl	8005094 <__malloc_unlock>
 8004d22:	f026 0607 	bic.w	r6, r6, #7
 8004d26:	1d23      	adds	r3, r4, #4
 8004d28:	1af2      	subs	r2, r6, r3
 8004d2a:	d0ae      	beq.n	8004c8a <_malloc_r+0x22>
 8004d2c:	1b9b      	subs	r3, r3, r6
 8004d2e:	50a3      	str	r3, [r4, r2]
 8004d30:	e7ab      	b.n	8004c8a <_malloc_r+0x22>
 8004d32:	42a3      	cmp	r3, r4
 8004d34:	6862      	ldr	r2, [r4, #4]
 8004d36:	d1dd      	bne.n	8004cf4 <_malloc_r+0x8c>
 8004d38:	f8c8 2000 	str.w	r2, [r8]
 8004d3c:	e7ec      	b.n	8004d18 <_malloc_r+0xb0>
 8004d3e:	4623      	mov	r3, r4
 8004d40:	6864      	ldr	r4, [r4, #4]
 8004d42:	e7ac      	b.n	8004c9e <_malloc_r+0x36>
 8004d44:	4634      	mov	r4, r6
 8004d46:	6876      	ldr	r6, [r6, #4]
 8004d48:	e7b4      	b.n	8004cb4 <_malloc_r+0x4c>
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	e7cc      	b.n	8004ce8 <_malloc_r+0x80>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	4638      	mov	r0, r7
 8004d54:	f000 f99e 	bl	8005094 <__malloc_unlock>
 8004d58:	e797      	b.n	8004c8a <_malloc_r+0x22>
 8004d5a:	6025      	str	r5, [r4, #0]
 8004d5c:	e7dc      	b.n	8004d18 <_malloc_r+0xb0>
 8004d5e:	605b      	str	r3, [r3, #4]
 8004d60:	deff      	udf	#255	; 0xff
 8004d62:	bf00      	nop
 8004d64:	20000bc0 	.word	0x20000bc0

08004d68 <_printf_common>:
 8004d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	4699      	mov	r9, r3
 8004d70:	688a      	ldr	r2, [r1, #8]
 8004d72:	690b      	ldr	r3, [r1, #16]
 8004d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	bfb8      	it	lt
 8004d7c:	4613      	movlt	r3, r2
 8004d7e:	6033      	str	r3, [r6, #0]
 8004d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d84:	4607      	mov	r7, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	b10a      	cbz	r2, 8004d8e <_printf_common+0x26>
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	0699      	lsls	r1, r3, #26
 8004d92:	bf42      	ittt	mi
 8004d94:	6833      	ldrmi	r3, [r6, #0]
 8004d96:	3302      	addmi	r3, #2
 8004d98:	6033      	strmi	r3, [r6, #0]
 8004d9a:	6825      	ldr	r5, [r4, #0]
 8004d9c:	f015 0506 	ands.w	r5, r5, #6
 8004da0:	d106      	bne.n	8004db0 <_printf_common+0x48>
 8004da2:	f104 0a19 	add.w	sl, r4, #25
 8004da6:	68e3      	ldr	r3, [r4, #12]
 8004da8:	6832      	ldr	r2, [r6, #0]
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	42ab      	cmp	r3, r5
 8004dae:	dc26      	bgt.n	8004dfe <_printf_common+0x96>
 8004db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004db4:	1e13      	subs	r3, r2, #0
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	bf18      	it	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	0692      	lsls	r2, r2, #26
 8004dbe:	d42b      	bmi.n	8004e18 <_printf_common+0xb0>
 8004dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	47c0      	blx	r8
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d01e      	beq.n	8004e0c <_printf_common+0xa4>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	6922      	ldr	r2, [r4, #16]
 8004dd2:	f003 0306 	and.w	r3, r3, #6
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	bf02      	ittt	eq
 8004dda:	68e5      	ldreq	r5, [r4, #12]
 8004ddc:	6833      	ldreq	r3, [r6, #0]
 8004dde:	1aed      	subeq	r5, r5, r3
 8004de0:	68a3      	ldr	r3, [r4, #8]
 8004de2:	bf0c      	ite	eq
 8004de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de8:	2500      	movne	r5, #0
 8004dea:	4293      	cmp	r3, r2
 8004dec:	bfc4      	itt	gt
 8004dee:	1a9b      	subgt	r3, r3, r2
 8004df0:	18ed      	addgt	r5, r5, r3
 8004df2:	2600      	movs	r6, #0
 8004df4:	341a      	adds	r4, #26
 8004df6:	42b5      	cmp	r5, r6
 8004df8:	d11a      	bne.n	8004e30 <_printf_common+0xc8>
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e008      	b.n	8004e10 <_printf_common+0xa8>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4652      	mov	r2, sl
 8004e02:	4649      	mov	r1, r9
 8004e04:	4638      	mov	r0, r7
 8004e06:	47c0      	blx	r8
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d103      	bne.n	8004e14 <_printf_common+0xac>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e14:	3501      	adds	r5, #1
 8004e16:	e7c6      	b.n	8004da6 <_printf_common+0x3e>
 8004e18:	18e1      	adds	r1, r4, r3
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	2030      	movs	r0, #48	; 0x30
 8004e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e22:	4422      	add	r2, r4
 8004e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	e7c7      	b.n	8004dc0 <_printf_common+0x58>
 8004e30:	2301      	movs	r3, #1
 8004e32:	4622      	mov	r2, r4
 8004e34:	4649      	mov	r1, r9
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c0      	blx	r8
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d0e6      	beq.n	8004e0c <_printf_common+0xa4>
 8004e3e:	3601      	adds	r6, #1
 8004e40:	e7d9      	b.n	8004df6 <_printf_common+0x8e>
	...

08004e44 <_printf_i>:
 8004e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	7e0f      	ldrb	r7, [r1, #24]
 8004e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e4c:	2f78      	cmp	r7, #120	; 0x78
 8004e4e:	4691      	mov	r9, r2
 8004e50:	4680      	mov	r8, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	469a      	mov	sl, r3
 8004e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e5a:	d807      	bhi.n	8004e6c <_printf_i+0x28>
 8004e5c:	2f62      	cmp	r7, #98	; 0x62
 8004e5e:	d80a      	bhi.n	8004e76 <_printf_i+0x32>
 8004e60:	2f00      	cmp	r7, #0
 8004e62:	f000 80d4 	beq.w	800500e <_printf_i+0x1ca>
 8004e66:	2f58      	cmp	r7, #88	; 0x58
 8004e68:	f000 80c0 	beq.w	8004fec <_printf_i+0x1a8>
 8004e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e74:	e03a      	b.n	8004eec <_printf_i+0xa8>
 8004e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e7a:	2b15      	cmp	r3, #21
 8004e7c:	d8f6      	bhi.n	8004e6c <_printf_i+0x28>
 8004e7e:	a101      	add	r1, pc, #4	; (adr r1, 8004e84 <_printf_i+0x40>)
 8004e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e84:	08004edd 	.word	0x08004edd
 8004e88:	08004ef1 	.word	0x08004ef1
 8004e8c:	08004e6d 	.word	0x08004e6d
 8004e90:	08004e6d 	.word	0x08004e6d
 8004e94:	08004e6d 	.word	0x08004e6d
 8004e98:	08004e6d 	.word	0x08004e6d
 8004e9c:	08004ef1 	.word	0x08004ef1
 8004ea0:	08004e6d 	.word	0x08004e6d
 8004ea4:	08004e6d 	.word	0x08004e6d
 8004ea8:	08004e6d 	.word	0x08004e6d
 8004eac:	08004e6d 	.word	0x08004e6d
 8004eb0:	08004ff5 	.word	0x08004ff5
 8004eb4:	08004f1d 	.word	0x08004f1d
 8004eb8:	08004faf 	.word	0x08004faf
 8004ebc:	08004e6d 	.word	0x08004e6d
 8004ec0:	08004e6d 	.word	0x08004e6d
 8004ec4:	08005017 	.word	0x08005017
 8004ec8:	08004e6d 	.word	0x08004e6d
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	08004e6d 	.word	0x08004e6d
 8004ed4:	08004e6d 	.word	0x08004e6d
 8004ed8:	08004fb7 	.word	0x08004fb7
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	602a      	str	r2, [r5, #0]
 8004ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eec:	2301      	movs	r3, #1
 8004eee:	e09f      	b.n	8005030 <_printf_i+0x1ec>
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	682b      	ldr	r3, [r5, #0]
 8004ef4:	0607      	lsls	r7, r0, #24
 8004ef6:	f103 0104 	add.w	r1, r3, #4
 8004efa:	6029      	str	r1, [r5, #0]
 8004efc:	d501      	bpl.n	8004f02 <_printf_i+0xbe>
 8004efe:	681e      	ldr	r6, [r3, #0]
 8004f00:	e003      	b.n	8004f0a <_printf_i+0xc6>
 8004f02:	0646      	lsls	r6, r0, #25
 8004f04:	d5fb      	bpl.n	8004efe <_printf_i+0xba>
 8004f06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	da03      	bge.n	8004f16 <_printf_i+0xd2>
 8004f0e:	232d      	movs	r3, #45	; 0x2d
 8004f10:	4276      	negs	r6, r6
 8004f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f16:	485a      	ldr	r0, [pc, #360]	; (8005080 <_printf_i+0x23c>)
 8004f18:	230a      	movs	r3, #10
 8004f1a:	e012      	b.n	8004f42 <_printf_i+0xfe>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	1d19      	adds	r1, r3, #4
 8004f22:	6029      	str	r1, [r5, #0]
 8004f24:	0605      	lsls	r5, r0, #24
 8004f26:	d501      	bpl.n	8004f2c <_printf_i+0xe8>
 8004f28:	681e      	ldr	r6, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <_printf_i+0xee>
 8004f2c:	0641      	lsls	r1, r0, #25
 8004f2e:	d5fb      	bpl.n	8004f28 <_printf_i+0xe4>
 8004f30:	881e      	ldrh	r6, [r3, #0]
 8004f32:	4853      	ldr	r0, [pc, #332]	; (8005080 <_printf_i+0x23c>)
 8004f34:	2f6f      	cmp	r7, #111	; 0x6f
 8004f36:	bf0c      	ite	eq
 8004f38:	2308      	moveq	r3, #8
 8004f3a:	230a      	movne	r3, #10
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f42:	6865      	ldr	r5, [r4, #4]
 8004f44:	60a5      	str	r5, [r4, #8]
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	bfa2      	ittt	ge
 8004f4a:	6821      	ldrge	r1, [r4, #0]
 8004f4c:	f021 0104 	bicge.w	r1, r1, #4
 8004f50:	6021      	strge	r1, [r4, #0]
 8004f52:	b90e      	cbnz	r6, 8004f58 <_printf_i+0x114>
 8004f54:	2d00      	cmp	r5, #0
 8004f56:	d04b      	beq.n	8004ff0 <_printf_i+0x1ac>
 8004f58:	4615      	mov	r5, r2
 8004f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f62:	5dc7      	ldrb	r7, [r0, r7]
 8004f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f68:	4637      	mov	r7, r6
 8004f6a:	42bb      	cmp	r3, r7
 8004f6c:	460e      	mov	r6, r1
 8004f6e:	d9f4      	bls.n	8004f5a <_printf_i+0x116>
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d10b      	bne.n	8004f8c <_printf_i+0x148>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	07de      	lsls	r6, r3, #31
 8004f78:	d508      	bpl.n	8004f8c <_printf_i+0x148>
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	6861      	ldr	r1, [r4, #4]
 8004f7e:	4299      	cmp	r1, r3
 8004f80:	bfde      	ittt	le
 8004f82:	2330      	movle	r3, #48	; 0x30
 8004f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f8c:	1b52      	subs	r2, r2, r5
 8004f8e:	6122      	str	r2, [r4, #16]
 8004f90:	f8cd a000 	str.w	sl, [sp]
 8004f94:	464b      	mov	r3, r9
 8004f96:	aa03      	add	r2, sp, #12
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	f7ff fee4 	bl	8004d68 <_printf_common>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d14a      	bne.n	800503a <_printf_i+0x1f6>
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fa8:	b004      	add	sp, #16
 8004faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	f043 0320 	orr.w	r3, r3, #32
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	4833      	ldr	r0, [pc, #204]	; (8005084 <_printf_i+0x240>)
 8004fb8:	2778      	movs	r7, #120	; 0x78
 8004fba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	6829      	ldr	r1, [r5, #0]
 8004fc2:	061f      	lsls	r7, r3, #24
 8004fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fc8:	d402      	bmi.n	8004fd0 <_printf_i+0x18c>
 8004fca:	065f      	lsls	r7, r3, #25
 8004fcc:	bf48      	it	mi
 8004fce:	b2b6      	uxthmi	r6, r6
 8004fd0:	07df      	lsls	r7, r3, #31
 8004fd2:	bf48      	it	mi
 8004fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd8:	6029      	str	r1, [r5, #0]
 8004fda:	bf48      	it	mi
 8004fdc:	6023      	strmi	r3, [r4, #0]
 8004fde:	b91e      	cbnz	r6, 8004fe8 <_printf_i+0x1a4>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f023 0320 	bic.w	r3, r3, #32
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	2310      	movs	r3, #16
 8004fea:	e7a7      	b.n	8004f3c <_printf_i+0xf8>
 8004fec:	4824      	ldr	r0, [pc, #144]	; (8005080 <_printf_i+0x23c>)
 8004fee:	e7e4      	b.n	8004fba <_printf_i+0x176>
 8004ff0:	4615      	mov	r5, r2
 8004ff2:	e7bd      	b.n	8004f70 <_printf_i+0x12c>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	6826      	ldr	r6, [r4, #0]
 8004ff8:	6961      	ldr	r1, [r4, #20]
 8004ffa:	1d18      	adds	r0, r3, #4
 8004ffc:	6028      	str	r0, [r5, #0]
 8004ffe:	0635      	lsls	r5, r6, #24
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	d501      	bpl.n	8005008 <_printf_i+0x1c4>
 8005004:	6019      	str	r1, [r3, #0]
 8005006:	e002      	b.n	800500e <_printf_i+0x1ca>
 8005008:	0670      	lsls	r0, r6, #25
 800500a:	d5fb      	bpl.n	8005004 <_printf_i+0x1c0>
 800500c:	8019      	strh	r1, [r3, #0]
 800500e:	2300      	movs	r3, #0
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	4615      	mov	r5, r2
 8005014:	e7bc      	b.n	8004f90 <_printf_i+0x14c>
 8005016:	682b      	ldr	r3, [r5, #0]
 8005018:	1d1a      	adds	r2, r3, #4
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	681d      	ldr	r5, [r3, #0]
 800501e:	6862      	ldr	r2, [r4, #4]
 8005020:	2100      	movs	r1, #0
 8005022:	4628      	mov	r0, r5
 8005024:	f7fb f8e4 	bl	80001f0 <memchr>
 8005028:	b108      	cbz	r0, 800502e <_printf_i+0x1ea>
 800502a:	1b40      	subs	r0, r0, r5
 800502c:	6060      	str	r0, [r4, #4]
 800502e:	6863      	ldr	r3, [r4, #4]
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	2300      	movs	r3, #0
 8005034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005038:	e7aa      	b.n	8004f90 <_printf_i+0x14c>
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	462a      	mov	r2, r5
 800503e:	4649      	mov	r1, r9
 8005040:	4640      	mov	r0, r8
 8005042:	47d0      	blx	sl
 8005044:	3001      	adds	r0, #1
 8005046:	d0ad      	beq.n	8004fa4 <_printf_i+0x160>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	079b      	lsls	r3, r3, #30
 800504c:	d413      	bmi.n	8005076 <_printf_i+0x232>
 800504e:	68e0      	ldr	r0, [r4, #12]
 8005050:	9b03      	ldr	r3, [sp, #12]
 8005052:	4298      	cmp	r0, r3
 8005054:	bfb8      	it	lt
 8005056:	4618      	movlt	r0, r3
 8005058:	e7a6      	b.n	8004fa8 <_printf_i+0x164>
 800505a:	2301      	movs	r3, #1
 800505c:	4632      	mov	r2, r6
 800505e:	4649      	mov	r1, r9
 8005060:	4640      	mov	r0, r8
 8005062:	47d0      	blx	sl
 8005064:	3001      	adds	r0, #1
 8005066:	d09d      	beq.n	8004fa4 <_printf_i+0x160>
 8005068:	3501      	adds	r5, #1
 800506a:	68e3      	ldr	r3, [r4, #12]
 800506c:	9903      	ldr	r1, [sp, #12]
 800506e:	1a5b      	subs	r3, r3, r1
 8005070:	42ab      	cmp	r3, r5
 8005072:	dcf2      	bgt.n	800505a <_printf_i+0x216>
 8005074:	e7eb      	b.n	800504e <_printf_i+0x20a>
 8005076:	2500      	movs	r5, #0
 8005078:	f104 0619 	add.w	r6, r4, #25
 800507c:	e7f5      	b.n	800506a <_printf_i+0x226>
 800507e:	bf00      	nop
 8005080:	080052b1 	.word	0x080052b1
 8005084:	080052c2 	.word	0x080052c2

08005088 <__malloc_lock>:
 8005088:	4801      	ldr	r0, [pc, #4]	; (8005090 <__malloc_lock+0x8>)
 800508a:	f7ff bc73 	b.w	8004974 <__retarget_lock_acquire_recursive>
 800508e:	bf00      	nop
 8005090:	20000bbc 	.word	0x20000bbc

08005094 <__malloc_unlock>:
 8005094:	4801      	ldr	r0, [pc, #4]	; (800509c <__malloc_unlock+0x8>)
 8005096:	f7ff bc6e 	b.w	8004976 <__retarget_lock_release_recursive>
 800509a:	bf00      	nop
 800509c:	20000bbc 	.word	0x20000bbc

080050a0 <_realloc_r>:
 80050a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a4:	4680      	mov	r8, r0
 80050a6:	4614      	mov	r4, r2
 80050a8:	460e      	mov	r6, r1
 80050aa:	b921      	cbnz	r1, 80050b6 <_realloc_r+0x16>
 80050ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b0:	4611      	mov	r1, r2
 80050b2:	f7ff bdd9 	b.w	8004c68 <_malloc_r>
 80050b6:	b92a      	cbnz	r2, 80050c4 <_realloc_r+0x24>
 80050b8:	f000 f85a 	bl	8005170 <_free_r>
 80050bc:	4625      	mov	r5, r4
 80050be:	4628      	mov	r0, r5
 80050c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c4:	f000 f8a0 	bl	8005208 <_malloc_usable_size_r>
 80050c8:	4284      	cmp	r4, r0
 80050ca:	4607      	mov	r7, r0
 80050cc:	d802      	bhi.n	80050d4 <_realloc_r+0x34>
 80050ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050d2:	d812      	bhi.n	80050fa <_realloc_r+0x5a>
 80050d4:	4621      	mov	r1, r4
 80050d6:	4640      	mov	r0, r8
 80050d8:	f7ff fdc6 	bl	8004c68 <_malloc_r>
 80050dc:	4605      	mov	r5, r0
 80050de:	2800      	cmp	r0, #0
 80050e0:	d0ed      	beq.n	80050be <_realloc_r+0x1e>
 80050e2:	42bc      	cmp	r4, r7
 80050e4:	4622      	mov	r2, r4
 80050e6:	4631      	mov	r1, r6
 80050e8:	bf28      	it	cs
 80050ea:	463a      	movcs	r2, r7
 80050ec:	f000 f832 	bl	8005154 <memcpy>
 80050f0:	4631      	mov	r1, r6
 80050f2:	4640      	mov	r0, r8
 80050f4:	f000 f83c 	bl	8005170 <_free_r>
 80050f8:	e7e1      	b.n	80050be <_realloc_r+0x1e>
 80050fa:	4635      	mov	r5, r6
 80050fc:	e7df      	b.n	80050be <_realloc_r+0x1e>

080050fe <memmove>:
 80050fe:	4288      	cmp	r0, r1
 8005100:	b510      	push	{r4, lr}
 8005102:	eb01 0402 	add.w	r4, r1, r2
 8005106:	d902      	bls.n	800510e <memmove+0x10>
 8005108:	4284      	cmp	r4, r0
 800510a:	4623      	mov	r3, r4
 800510c:	d807      	bhi.n	800511e <memmove+0x20>
 800510e:	1e43      	subs	r3, r0, #1
 8005110:	42a1      	cmp	r1, r4
 8005112:	d008      	beq.n	8005126 <memmove+0x28>
 8005114:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005118:	f803 2f01 	strb.w	r2, [r3, #1]!
 800511c:	e7f8      	b.n	8005110 <memmove+0x12>
 800511e:	4402      	add	r2, r0
 8005120:	4601      	mov	r1, r0
 8005122:	428a      	cmp	r2, r1
 8005124:	d100      	bne.n	8005128 <memmove+0x2a>
 8005126:	bd10      	pop	{r4, pc}
 8005128:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800512c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005130:	e7f7      	b.n	8005122 <memmove+0x24>
	...

08005134 <_sbrk_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d06      	ldr	r5, [pc, #24]	; (8005150 <_sbrk_r+0x1c>)
 8005138:	2300      	movs	r3, #0
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	f7fc fba6 	bl	8001890 <_sbrk>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_sbrk_r+0x1a>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_sbrk_r+0x1a>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	20000bc8 	.word	0x20000bc8

08005154 <memcpy>:
 8005154:	440a      	add	r2, r1
 8005156:	4291      	cmp	r1, r2
 8005158:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800515c:	d100      	bne.n	8005160 <memcpy+0xc>
 800515e:	4770      	bx	lr
 8005160:	b510      	push	{r4, lr}
 8005162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800516a:	4291      	cmp	r1, r2
 800516c:	d1f9      	bne.n	8005162 <memcpy+0xe>
 800516e:	bd10      	pop	{r4, pc}

08005170 <_free_r>:
 8005170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005172:	2900      	cmp	r1, #0
 8005174:	d044      	beq.n	8005200 <_free_r+0x90>
 8005176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800517a:	9001      	str	r0, [sp, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	f1a1 0404 	sub.w	r4, r1, #4
 8005182:	bfb8      	it	lt
 8005184:	18e4      	addlt	r4, r4, r3
 8005186:	f7ff ff7f 	bl	8005088 <__malloc_lock>
 800518a:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <_free_r+0x94>)
 800518c:	9801      	ldr	r0, [sp, #4]
 800518e:	6813      	ldr	r3, [r2, #0]
 8005190:	b933      	cbnz	r3, 80051a0 <_free_r+0x30>
 8005192:	6063      	str	r3, [r4, #4]
 8005194:	6014      	str	r4, [r2, #0]
 8005196:	b003      	add	sp, #12
 8005198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800519c:	f7ff bf7a 	b.w	8005094 <__malloc_unlock>
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	d908      	bls.n	80051b6 <_free_r+0x46>
 80051a4:	6825      	ldr	r5, [r4, #0]
 80051a6:	1961      	adds	r1, r4, r5
 80051a8:	428b      	cmp	r3, r1
 80051aa:	bf01      	itttt	eq
 80051ac:	6819      	ldreq	r1, [r3, #0]
 80051ae:	685b      	ldreq	r3, [r3, #4]
 80051b0:	1949      	addeq	r1, r1, r5
 80051b2:	6021      	streq	r1, [r4, #0]
 80051b4:	e7ed      	b.n	8005192 <_free_r+0x22>
 80051b6:	461a      	mov	r2, r3
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	b10b      	cbz	r3, 80051c0 <_free_r+0x50>
 80051bc:	42a3      	cmp	r3, r4
 80051be:	d9fa      	bls.n	80051b6 <_free_r+0x46>
 80051c0:	6811      	ldr	r1, [r2, #0]
 80051c2:	1855      	adds	r5, r2, r1
 80051c4:	42a5      	cmp	r5, r4
 80051c6:	d10b      	bne.n	80051e0 <_free_r+0x70>
 80051c8:	6824      	ldr	r4, [r4, #0]
 80051ca:	4421      	add	r1, r4
 80051cc:	1854      	adds	r4, r2, r1
 80051ce:	42a3      	cmp	r3, r4
 80051d0:	6011      	str	r1, [r2, #0]
 80051d2:	d1e0      	bne.n	8005196 <_free_r+0x26>
 80051d4:	681c      	ldr	r4, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	6053      	str	r3, [r2, #4]
 80051da:	440c      	add	r4, r1
 80051dc:	6014      	str	r4, [r2, #0]
 80051de:	e7da      	b.n	8005196 <_free_r+0x26>
 80051e0:	d902      	bls.n	80051e8 <_free_r+0x78>
 80051e2:	230c      	movs	r3, #12
 80051e4:	6003      	str	r3, [r0, #0]
 80051e6:	e7d6      	b.n	8005196 <_free_r+0x26>
 80051e8:	6825      	ldr	r5, [r4, #0]
 80051ea:	1961      	adds	r1, r4, r5
 80051ec:	428b      	cmp	r3, r1
 80051ee:	bf04      	itt	eq
 80051f0:	6819      	ldreq	r1, [r3, #0]
 80051f2:	685b      	ldreq	r3, [r3, #4]
 80051f4:	6063      	str	r3, [r4, #4]
 80051f6:	bf04      	itt	eq
 80051f8:	1949      	addeq	r1, r1, r5
 80051fa:	6021      	streq	r1, [r4, #0]
 80051fc:	6054      	str	r4, [r2, #4]
 80051fe:	e7ca      	b.n	8005196 <_free_r+0x26>
 8005200:	b003      	add	sp, #12
 8005202:	bd30      	pop	{r4, r5, pc}
 8005204:	20000bc0 	.word	0x20000bc0

08005208 <_malloc_usable_size_r>:
 8005208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800520c:	1f18      	subs	r0, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	bfbc      	itt	lt
 8005212:	580b      	ldrlt	r3, [r1, r0]
 8005214:	18c0      	addlt	r0, r0, r3
 8005216:	4770      	bx	lr

08005218 <_init>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr

08005224 <_fini>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	bf00      	nop
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr
